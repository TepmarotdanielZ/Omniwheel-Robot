
Test nrf24l01 Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005948  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b10  08005b10  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08005b10  08005b10  00015b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b18  08005b18  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b18  08005b18  00015b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000038  08005b54  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08005b54  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d79d  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002327  00000000  00000000  0002d801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002fb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00030860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a10  00000000  00000000  00031480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9c3  00000000  00000000  00047e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb8f  00000000  00000000  00057853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e43e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003820  00000000  00000000  000e4434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000038 	.word	0x20000038
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005ac8 	.word	0x08005ac8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000003c 	.word	0x2000003c
 80001d4:	08005ac8 	.word	0x08005ac8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <nrf24_WriteReg>:
#define NRF24_CSN_LOW			HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET)
#define NRF24_CSN_HIGH			HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET)

/* Write the data to the register */
static void nrf24_WriteReg (uint8_t Reg, uint8_t data)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|(1<<5);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	737b      	strb	r3, [r7, #13]
	NRF24_CSN_LOW;
 8000e96:	2200      	movs	r2, #0
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <nrf24_WriteReg+0x48>)
 8000e9c:	f002 fd72 	bl	8003984 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 100);
 8000ea0:	f107 010c 	add.w	r1, r7, #12
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <nrf24_WriteReg+0x4c>)
 8000eaa:	f003 fa4a 	bl	8004342 <HAL_SPI_Transmit>

	NRF24_CSN_HIGH;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <nrf24_WriteReg+0x48>)
 8000eb4:	f002 fd66 	bl	8003984 <HAL_GPIO_WritePin>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	200001f0 	.word	0x200001f0

08000ec8 <nrf24_WriteReg_Multi>:

static void nrf24_WriteReg_Multi (uint8_t Reg, uint8_t *data, uint16_t size)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	80bb      	strh	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = Reg|(1<<5);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f043 0320 	orr.w	r3, r3, #32
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	733b      	strb	r3, [r7, #12]
//	buf[1] = data;
	NRF24_CSN_LOW;
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	480c      	ldr	r0, [pc, #48]	; (8000f18 <nrf24_WriteReg_Multi+0x50>)
 8000ee8:	f002 fd4c 	bl	8003984 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 10);
 8000eec:	f107 010c 	add.w	r1, r7, #12
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <nrf24_WriteReg_Multi+0x54>)
 8000ef6:	f003 fa24 	bl	8004342 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 100);
 8000efa:	88ba      	ldrh	r2, [r7, #4]
 8000efc:	2364      	movs	r3, #100	; 0x64
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <nrf24_WriteReg_Multi+0x54>)
 8000f02:	f003 fa1e 	bl	8004342 <HAL_SPI_Transmit>

	NRF24_CSN_HIGH;
 8000f06:	2201      	movs	r2, #1
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <nrf24_WriteReg_Multi+0x50>)
 8000f0c:	f002 fd3a 	bl	8003984 <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	200001f0 	.word	0x200001f0

08000f20 <nrf24_ReadReg>:


/* Read single byte from the register */
static uint8_t nrf24_ReadReg(uint8_t Reg)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	NRF24_CSN_LOW;
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <nrf24_ReadReg+0x44>)
 8000f30:	f002 fd28 	bl	8003984 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 10);
 8000f34:	1df9      	adds	r1, r7, #7
 8000f36:	230a      	movs	r3, #10
 8000f38:	2201      	movs	r2, #1
 8000f3a:	480b      	ldr	r0, [pc, #44]	; (8000f68 <nrf24_ReadReg+0x48>)
 8000f3c:	f003 fa01 	bl	8004342 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 10);
 8000f40:	f107 010f 	add.w	r1, r7, #15
 8000f44:	230a      	movs	r3, #10
 8000f46:	2201      	movs	r2, #1
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <nrf24_ReadReg+0x48>)
 8000f4a:	f003 fb36 	bl	80045ba <HAL_SPI_Receive>

	NRF24_CSN_HIGH;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	4804      	ldr	r0, [pc, #16]	; (8000f64 <nrf24_ReadReg+0x44>)
 8000f54:	f002 fd16 	bl	8003984 <HAL_GPIO_WritePin>

	return data;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020400 	.word	0x40020400
 8000f68:	200001f0 	.word	0x200001f0

08000f6c <nrfsendCmd>:
	NRF24_CSN_HIGH;
}


static void nrfsendCmd (uint8_t cmd)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000f76:	2200      	movs	r2, #0
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <nrfsendCmd+0x34>)
 8000f7c:	f002 fd02 	bl	8003984 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 10);
 8000f80:	1df9      	adds	r1, r7, #7
 8000f82:	230a      	movs	r3, #10
 8000f84:	2201      	movs	r2, #1
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <nrfsendCmd+0x38>)
 8000f88:	f003 f9db 	bl	8004342 <HAL_SPI_Transmit>
	NRF24_CSN_HIGH;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <nrfsendCmd+0x34>)
 8000f92:	f002 fcf7 	bl	8003984 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	200001f0 	.word	0x200001f0

08000fa8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b07      	cmp	r3, #7
 8000fb6:	d104      	bne.n	8000fc2 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x0e);
 8000fb8:	210e      	movs	r1, #14
 8000fba:	2007      	movs	r0, #7
 8000fbc:	f7ff ff5c 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000fc0:	e090      	b.n	80010e4 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b17      	cmp	r3, #23
 8000fc6:	d104      	bne.n	8000fd2 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000fc8:	2111      	movs	r1, #17
 8000fca:	2017      	movs	r0, #23
 8000fcc:	f7ff ff54 	bl	8000e78 <nrf24_WriteReg>
}
 8000fd0:	e088      	b.n	80010e4 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff ff4f 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3f);
 8000fda:	213f      	movs	r1, #63	; 0x3f
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff ff4b 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000fe2:	2103      	movs	r1, #3
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f7ff ff47 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000fea:	2103      	movs	r1, #3
 8000fec:	2003      	movs	r0, #3
 8000fee:	f7ff ff43 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	2004      	movs	r0, #4
 8000ff6:	f7ff ff3f 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	2005      	movs	r0, #5
 8000ffe:	f7ff ff3b 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0e);
 8001002:	210e      	movs	r1, #14
 8001004:	2006      	movs	r0, #6
 8001006:	f7ff ff37 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x0e);
 800100a:	210e      	movs	r1, #14
 800100c:	2007      	movs	r0, #7
 800100e:	f7ff ff33 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8001012:	2100      	movs	r1, #0
 8001014:	2008      	movs	r0, #8
 8001016:	f7ff ff2f 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800101a:	2100      	movs	r1, #0
 800101c:	2009      	movs	r0, #9
 800101e:	f7ff ff2b 	bl	8000e78 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xe7, 0xe7, 0xe7, 0xe7, 0xe7};
 8001022:	4a32      	ldr	r2, [pc, #200]	; (80010ec <nrf24_reset+0x144>)
 8001024:	f107 0318 	add.w	r3, r7, #24
 8001028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102c:	6018      	str	r0, [r3, #0]
 800102e:	3304      	adds	r3, #4
 8001030:	7019      	strb	r1, [r3, #0]
	nrf24_WriteReg_Multi(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	2205      	movs	r2, #5
 8001038:	4619      	mov	r1, r3
 800103a:	200a      	movs	r0, #10
 800103c:	f7ff ff44 	bl	8000ec8 <nrf24_WriteReg_Multi>
	uint8_t rx_addr_p1_def[5] = {0xc2, 0xc2, 0xc2, 0xc2, 0xc2};
 8001040:	4a2b      	ldr	r2, [pc, #172]	; (80010f0 <nrf24_reset+0x148>)
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	e892 0003 	ldmia.w	r2, {r0, r1}
 800104a:	6018      	str	r0, [r3, #0]
 800104c:	3304      	adds	r3, #4
 800104e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteReg_Multi(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	2205      	movs	r2, #5
 8001056:	4619      	mov	r1, r3
 8001058:	200b      	movs	r0, #11
 800105a:	f7ff ff35 	bl	8000ec8 <nrf24_WriteReg_Multi>
	nrf24_WriteReg(RX_ADDR_P2, 0xc3);
 800105e:	21c3      	movs	r1, #195	; 0xc3
 8001060:	200c      	movs	r0, #12
 8001062:	f7ff ff09 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xc4);
 8001066:	21c4      	movs	r1, #196	; 0xc4
 8001068:	200d      	movs	r0, #13
 800106a:	f7ff ff05 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xc5);
 800106e:	21c5      	movs	r1, #197	; 0xc5
 8001070:	200e      	movs	r0, #14
 8001072:	f7ff ff01 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xc6);
 8001076:	21c6      	movs	r1, #198	; 0xc6
 8001078:	200f      	movs	r0, #15
 800107a:	f7ff fefd 	bl	8000e78 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xc7, 0xc7, 0xc7, 0xc7, 0xc7};
 800107e:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <nrf24_reset+0x14c>)
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001088:	6018      	str	r0, [r3, #0]
 800108a:	3304      	adds	r3, #4
 800108c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteReg_Multi(TX_ADDR, tx_addr_def, 5);
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	2205      	movs	r2, #5
 8001094:	4619      	mov	r1, r3
 8001096:	2010      	movs	r0, #16
 8001098:	f7ff ff16 	bl	8000ec8 <nrf24_WriteReg_Multi>
	nrf24_WriteReg(RX_PW_P0, 0);
 800109c:	2100      	movs	r1, #0
 800109e:	2011      	movs	r0, #17
 80010a0:	f7ff feea 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80010a4:	2100      	movs	r1, #0
 80010a6:	2012      	movs	r0, #18
 80010a8:	f7ff fee6 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2013      	movs	r0, #19
 80010b0:	f7ff fee2 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80010b4:	2100      	movs	r1, #0
 80010b6:	2014      	movs	r0, #20
 80010b8:	f7ff fede 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80010bc:	2100      	movs	r1, #0
 80010be:	2015      	movs	r0, #21
 80010c0:	f7ff feda 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80010c4:	2100      	movs	r1, #0
 80010c6:	2016      	movs	r0, #22
 80010c8:	f7ff fed6 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80010cc:	2111      	movs	r1, #17
 80010ce:	2017      	movs	r0, #23
 80010d0:	f7ff fed2 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80010d4:	2100      	movs	r1, #0
 80010d6:	201c      	movs	r0, #28
 80010d8:	f7ff fece 	bl	8000e78 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80010dc:	2100      	movs	r1, #0
 80010de:	201d      	movs	r0, #29
 80010e0:	f7ff feca 	bl	8000e78 <nrf24_WriteReg>
}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	08005ae0 	.word	0x08005ae0
 80010f0:	08005ae8 	.word	0x08005ae8
 80010f4:	08005af0 	.word	0x08005af0

080010f8 <NRF24_Init>:



void NRF24_Init (void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	// idle state for the pins
	NRF24_CSN_HIGH;
 80010fc:	2201      	movs	r2, #1
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	4811      	ldr	r0, [pc, #68]	; (8001148 <NRF24_Init+0x50>)
 8001102:	f002 fc3f 	bl	8003984 <HAL_GPIO_WritePin>
	NRF24_CE_LOW;
 8001106:	2200      	movs	r2, #0
 8001108:	2140      	movs	r1, #64	; 0x40
 800110a:	480f      	ldr	r0, [pc, #60]	; (8001148 <NRF24_Init+0x50>)
 800110c:	f002 fc3a 	bl	8003984 <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8001110:	2001      	movs	r0, #1
 8001112:	f001 fe7b 	bl	8002e0c <HAL_Delay>

	// reset the nrf
	nrf24_reset(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff ff46 	bl	8000fa8 <nrf24_reset>

	// config register
	nrf24_WriteReg(CONFIG, 0x00);
 800111c:	2100      	movs	r1, #0
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff feaa 	bl	8000e78 <nrf24_WriteReg>

	// Disable Auto ACK for all data pipes
	nrf24_WriteReg(EN_AA, 0x00);
 8001124:	2100      	movs	r1, #0
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fea6 	bl	8000e78 <nrf24_WriteReg>

	// set up address width
	//nrf24_WriteReg(SETUP_AW, 0x01);

	//set the  Automatic Retransmission
	nrf24_WriteReg(SETUP_RETR, 0xff);
 800112c:	21ff      	movs	r1, #255	; 0xff
 800112e:	2004      	movs	r0, #4
 8001130:	f7ff fea2 	bl	8000e78 <nrf24_WriteReg>

	// set RF Register
	//nrf24_WriteReg(RF_SETUP , 0x06);
	SetRF(0, 3);
 8001134:	2103      	movs	r1, #3
 8001136:	2000      	movs	r0, #0
 8001138:	f000 f808 	bl	800114c <SetRF>

	// disable dynamic payload
	nrf24_WriteReg(FEATURE, 0);
 800113c:	2100      	movs	r1, #0
 800113e:	201d      	movs	r0, #29
 8001140:	f7ff fe9a 	bl	8000e78 <nrf24_WriteReg>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40020400 	.word	0x40020400

0800114c <SetRF>:
void SetRF(uint8_t DataRate, uint8_t OutPwr) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

	if (DataRate == 2) {//NRF24L01_DataRate_2M
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d104      	bne.n	8001170 <SetRF+0x24>
		tmp |= 1 << 3;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e006      	b.n	800117e <SetRF+0x32>
	} else if (DataRate == 250) {//NRF24L01_DataRate_250k
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2bfa      	cmp	r3, #250	; 0xfa
 8001174:	d103      	bne.n	800117e <SetRF+0x32>
		tmp |= 1 << 5;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	73fb      	strb	r3, [r7, #15]
	}
	/* If 1Mbps, all bits set to 0 */

	if (OutPwr == 3) {//NRF24L01_OutputPower_0dBm
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	2b03      	cmp	r3, #3
 8001182:	d104      	bne.n	800118e <SetRF+0x42>
		tmp |= 3 << 1;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	f043 0306 	orr.w	r3, r3, #6
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e011      	b.n	80011b2 <SetRF+0x66>
	} else if (OutPwr == 2) {//NRF24L01_OutputPower_-6dBm
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d104      	bne.n	800119e <SetRF+0x52>
		tmp |= 2 << 1;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e009      	b.n	80011b2 <SetRF+0x66>
	} else if (OutPwr == 1) {//NRF24L01_OutputPower_-12dBm
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d104      	bne.n	80011ae <SetRF+0x62>
		tmp |= 1 << 1;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e001      	b.n	80011b2 <SetRF+0x66>
	}else if(OutPwr == 0){////NRF24L01_OutputPower_-18dBm
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	2b00      	cmp	r3, #0
		tmp |= 0 << 1;
	}

	nrf24_WriteReg(RF_SETUP, tmp);
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	4619      	mov	r1, r3
 80011b6:	2006      	movs	r0, #6
 80011b8:	f7ff fe5e 	bl	8000e78 <nrf24_WriteReg>
}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel, uint8_t payload_size)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
 80011d0:	4613      	mov	r3, r2
 80011d2:	70bb      	strb	r3, [r7, #2]
	uint8_t cmdtosend;

	// Pull the CE LOW
	NRF24_CE_LOW;
 80011d4:	2200      	movs	r2, #0
 80011d6:	2140      	movs	r1, #64	; 0x40
 80011d8:	4818      	ldr	r0, [pc, #96]	; (800123c <NRF24_RxMode+0x78>)
 80011da:	f002 fbd3 	bl	8003984 <HAL_GPIO_WritePin>

	// Flush the RX FIFO
	cmdtosend = FLUSH_RX;
 80011de:	23e2      	movs	r3, #226	; 0xe2
 80011e0:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fec1 	bl	8000f6c <nrfsendCmd>

	// Reset the status Register
	nrf24_reset(STATUS);
 80011ea:	2007      	movs	r0, #7
 80011ec:	f7ff fedc 	bl	8000fa8 <nrf24_reset>

	// set the payload size for pipe 1
	nrf24_WriteReg(RX_PW_P1, payload_size);
 80011f0:	78bb      	ldrb	r3, [r7, #2]
 80011f2:	4619      	mov	r1, r3
 80011f4:	2012      	movs	r0, #18
 80011f6:	f7ff fe3f 	bl	8000e78 <nrf24_WriteReg>

	//set address for rx pipe
	nrf24_WriteReg_Multi(RX_ADDR_P1, Address, 5);
 80011fa:	2205      	movs	r2, #5
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	200b      	movs	r0, #11
 8001200:	f7ff fe62 	bl	8000ec8 <nrf24_WriteReg_Multi>

	nrf24_WriteReg(RF_CH, channel);
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	4619      	mov	r1, r3
 8001208:	2005      	movs	r0, #5
 800120a:	f7ff fe35 	bl	8000e78 <nrf24_WriteReg>
	// enable Pipe 1 for RX
	//nrf24_WriteReg(EN_RXADDR, nrf24_ReadReg(EN_RXADDR)|(1<<1));
	// enable Pipe 0 for RX
	//nrf24_WriteReg(EN_RXADDR, 0x01);

	uint8_t config = nrf24_ReadReg(CONFIG);
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fe86 	bl	8000f20 <nrf24_ReadReg>
 8001214:	4603      	mov	r3, r0
 8001216:	73bb      	strb	r3, [r7, #14]
	config|= (1<<1) | (1<<0);   // enable the PWR_UP bit and PRIM_RX bit
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	f043 0303 	orr.w	r3, r3, #3
 800121e:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG, config);  // power on in rx mode
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	4619      	mov	r1, r3
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fe27 	bl	8000e78 <nrf24_WriteReg>

	NRF24_CE_HIGH;
 800122a:	2201      	movs	r2, #1
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <NRF24_RxMode+0x78>)
 8001230:	f002 fba8 	bl	8003984 <HAL_GPIO_WritePin>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40020400 	.word	0x40020400

08001240 <DataReady>:
		return 1;
	}

	else return 0;
}
uint8_t DataReady(uint8_t Pipenum) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	uint8_t status=nrf24_ReadReg(STATUS);
 800124a:	2007      	movs	r0, #7
 800124c:	f7ff fe68 	bl	8000f20 <nrf24_ReadReg>
 8001250:	4603      	mov	r3, r0
 8001252:	73fb      	strb	r3, [r7, #15]
	if ((status&(1<<6)) && (status&(Pipenum<<1))){
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <DataReady+0x2e>
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <DataReady+0x2e>
		// clear the RX_DR bit
		//nrf24_WriteReg(STATUS, status|(1<<6));
		return 1;
 800126a:	2301      	movs	r3, #1
 800126c:	e007      	b.n	800127e <DataReady+0x3e>
	}
	return !RxFifoEmpty();
 800126e:	f000 f80a 	bl	8001286 <RxFifoEmpty>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <RxFifoEmpty>:

uint8_t RxFifoEmpty(void) {
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
	uint8_t data = nrf24_ReadReg(FIFO_STATUS);
 800128c:	2017      	movs	r0, #23
 800128e:	f7ff fe47 	bl	8000f20 <nrf24_ReadReg>
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	return data;
 8001296:	79fb      	ldrb	r3, [r7, #7]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <NRF24_Receive>:



void NRF24_Receive (uint8_t *data, uint16_t size)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
	uint8_t cmdtosend;

	// Pull the CSN pin LOW
	NRF24_CSN_LOW;
 80012ac:	2200      	movs	r2, #0
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	4812      	ldr	r0, [pc, #72]	; (80012fc <NRF24_Receive+0x5c>)
 80012b2:	f002 fb67 	bl	8003984 <HAL_GPIO_WritePin>

	// Send the read command
	cmdtosend = R_RX_PAYLOAD;
 80012b6:	2361      	movs	r3, #97	; 0x61
 80012b8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 10);
 80012ba:	f107 010f 	add.w	r1, r7, #15
 80012be:	230a      	movs	r3, #10
 80012c0:	2201      	movs	r2, #1
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <NRF24_Receive+0x60>)
 80012c4:	f003 f83d 	bl	8004342 <HAL_SPI_Transmit>

	// read the data
	HAL_SPI_Receive(NRF24_SPI, data, size, 100);
 80012c8:	887a      	ldrh	r2, [r7, #2]
 80012ca:	2364      	movs	r3, #100	; 0x64
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <NRF24_Receive+0x60>)
 80012d0:	f003 f973 	bl	80045ba <HAL_SPI_Receive>

	// pull the CS pin HIGH
	NRF24_CSN_HIGH;
 80012d4:	2201      	movs	r2, #1
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <NRF24_Receive+0x5c>)
 80012da:	f002 fb53 	bl	8003984 <HAL_GPIO_WritePin>
	// clear the RX_DR bit
	nrf24_WriteReg(STATUS, (1<<6));
 80012de:	2140      	movs	r1, #64	; 0x40
 80012e0:	2007      	movs	r0, #7
 80012e2:	f7ff fdc9 	bl	8000e78 <nrf24_WriteReg>
	// Flush the RX FIFO
	cmdtosend = FLUSH_RX;
 80012e6:	23e2      	movs	r3, #226	; 0xe2
 80012e8:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe3d 	bl	8000f6c <nrfsendCmd>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40020400 	.word	0x40020400
 8001300:	200001f0 	.word	0x200001f0

08001304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_DMA_Init+0x4c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <MX_DMA_Init+0x4c>)
 8001314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_DMA_Init+0x4c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2011      	movs	r0, #17
 800132c:	f001 fe6d 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001330:	2011      	movs	r0, #17
 8001332:	f001 fe86 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	202f      	movs	r0, #47	; 0x2f
 800133c:	f001 fe65 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001340:	202f      	movs	r0, #47	; 0x2f
 8001342:	f001 fe7e 	bl	8003042 <HAL_NVIC_EnableIRQ>

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b61      	ldr	r3, [pc, #388]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a60      	ldr	r2, [pc, #384]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b5a      	ldr	r3, [pc, #360]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a59      	ldr	r2, [pc, #356]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a52      	ldr	r2, [pc, #328]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e0:	4845      	ldr	r0, [pc, #276]	; (80014f8 <MX_GPIO_Init+0x1a4>)
 80013e2:	f002 facf 	bl	8003984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|SPI1_CE_Pin|SPI1_CSN_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 80013ec:	4843      	ldr	r0, [pc, #268]	; (80014fc <MX_GPIO_Init+0x1a8>)
 80013ee:	f002 fac9 	bl	8003984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f8:	4841      	ldr	r0, [pc, #260]	; (8001500 <MX_GPIO_Init+0x1ac>)
 80013fa:	f002 fac3 	bl	8003984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4838      	ldr	r0, [pc, #224]	; (80014f8 <MX_GPIO_Init+0x1a4>)
 8001418:	f002 f918 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 800141c:	f641 0330 	movw	r3, #6192	; 0x1830
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001422:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4833      	ldr	r0, [pc, #204]	; (8001500 <MX_GPIO_Init+0x1ac>)
 8001434:	f002 f90a 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001438:	f24c 4304 	movw	r3, #50180	; 0xc404
 800143c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800143e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	482b      	ldr	r0, [pc, #172]	; (80014fc <MX_GPIO_Init+0x1a8>)
 8001450:	f002 f8fc 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|SPI1_CE_Pin|SPI1_CSN_Pin;
 8001454:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4823      	ldr	r0, [pc, #140]	; (80014fc <MX_GPIO_Init+0x1a8>)
 800146e:	f002 f8ed 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8001472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	481e      	ldr	r0, [pc, #120]	; (8001500 <MX_GPIO_Init+0x1ac>)
 8001488:	f002 f8e0 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trig_Pin;
 800148c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4816      	ldr	r0, [pc, #88]	; (8001500 <MX_GPIO_Init+0x1ac>)
 80014a6:	f002 f8d1 	bl	800364c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2008      	movs	r0, #8
 80014b0:	f001 fdab 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80014b4:	2008      	movs	r0, #8
 80014b6:	f001 fdc4 	bl	8003042 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	200a      	movs	r0, #10
 80014c0:	f001 fda3 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014c4:	200a      	movs	r0, #10
 80014c6:	f001 fdbc 	bl	8003042 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2017      	movs	r0, #23
 80014d0:	f001 fd9b 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014d4:	2017      	movs	r0, #23
 80014d6:	f001 fdb4 	bl	8003042 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2028      	movs	r0, #40	; 0x28
 80014e0:	f001 fd93 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014e4:	2028      	movs	r0, #40	; 0x28
 80014e6:	f001 fdac 	bl	8003042 <HAL_NVIC_EnableIRQ>

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020000 	.word	0x40020000

08001504 <map>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
double map(double x, double in_min, double in_max, double out_min,
		double out_max) {
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	ed87 0b08 	vstr	d0, [r7, #32]
 800150e:	ed87 1b06 	vstr	d1, [r7, #24]
 8001512:	ed87 2b04 	vstr	d2, [r7, #16]
 8001516:	ed87 3b02 	vstr	d3, [r7, #8]
 800151a:	ed87 4b00 	vstr	d4, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800151e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001522:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001526:	f7fe fe5b 	bl	80001e0 <__aeabi_dsub>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4614      	mov	r4, r2
 8001530:	461d      	mov	r5, r3
 8001532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153a:	f7fe fe51 	bl	80001e0 <__aeabi_dsub>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7ff f803 	bl	8000550 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4614      	mov	r4, r2
 8001550:	461d      	mov	r5, r3
 8001552:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001556:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800155a:	f7fe fe41 	bl	80001e0 <__aeabi_dsub>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7ff f91d 	bl	80007a4 <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001576:	f7fe fe35 	bl	80001e4 <__adddf3>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001582:	eeb0 0a47 	vmov.f32	s0, s14
 8001586:	eef0 0a67 	vmov.f32	s1, s15
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bdb0      	pop	{r4, r5, r7, pc}

08001590 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENCODER_M_L1_Pin || ENCODER_M_R1_Pin) {
		encoder1[0] = HAL_GPIO_ReadPin(ENCODER_M_L1_GPIO_Port,ENCODER_M_L1_Pin);
 800159a:	2110      	movs	r1, #16
 800159c:	4823      	ldr	r0, [pc, #140]	; (800162c <HAL_GPIO_EXTI_Callback+0x9c>)
 800159e:	f002 f9d9 	bl	8003954 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015a8:	601a      	str	r2, [r3, #0]
		encoder2[0] = HAL_GPIO_ReadPin(ENCODER_M_R1_GPIO_Port,ENCODER_M_R1_Pin);
 80015aa:	2120      	movs	r1, #32
 80015ac:	481f      	ldr	r0, [pc, #124]	; (800162c <HAL_GPIO_EXTI_Callback+0x9c>)
 80015ae:	f002 f9d1 	bl	8003954 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_GPIO_EXTI_Callback+0xa4>)
 80015b8:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == ENCODER_M_L2_Pin || ENCODER_M_R2_Pin) {
		encoder1[1] = HAL_GPIO_ReadPin(ENCODER_M_L2_GPIO_Port,ENCODER_M_L2_Pin);
 80015ba:	2104      	movs	r1, #4
 80015bc:	481e      	ldr	r0, [pc, #120]	; (8001638 <HAL_GPIO_EXTI_Callback+0xa8>)
 80015be:	f002 f9c9 	bl	8003954 <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015c8:	605a      	str	r2, [r3, #4]
		encoder2[1] = HAL_GPIO_ReadPin(ENCODER_M_R2_GPIO_Port,ENCODER_M_R2_Pin);
 80015ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ce:	481a      	ldr	r0, [pc, #104]	; (8001638 <HAL_GPIO_EXTI_Callback+0xa8>)
 80015d0:	f002 f9c0 	bl	8003954 <HAL_GPIO_ReadPin>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_GPIO_EXTI_Callback+0xa4>)
 80015da:	605a      	str	r2, [r3, #4]
	}
	if (GPIO_Pin == ENCODER_M_L3_Pin || ENCODER_M_R3_Pin) {
		encoder1[2] = HAL_GPIO_ReadPin(ENCODER_M_L3_GPIO_Port,ENCODER_M_L3_Pin);
 80015dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e0:	4812      	ldr	r0, [pc, #72]	; (800162c <HAL_GPIO_EXTI_Callback+0x9c>)
 80015e2:	f002 f9b7 	bl	8003954 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015ec:	609a      	str	r2, [r3, #8]
		encoder2[2] = HAL_GPIO_ReadPin(ENCODER_M_R3_GPIO_Port,ENCODER_M_R3_Pin);
 80015ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f2:	480e      	ldr	r0, [pc, #56]	; (800162c <HAL_GPIO_EXTI_Callback+0x9c>)
 80015f4:	f002 f9ae 	bl	8003954 <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_GPIO_EXTI_Callback+0xa4>)
 80015fe:	609a      	str	r2, [r3, #8]
	}
	if (GPIO_Pin == ENCODER_M_L4_Pin || ENCODER_M_R4_Pin) {
		encoder1[3] = HAL_GPIO_ReadPin(ENCODER_M_L4_GPIO_Port,ENCODER_M_L4_Pin);
 8001600:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001606:	f002 f9a5 	bl	8003954 <HAL_GPIO_ReadPin>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001610:	60da      	str	r2, [r3, #12]
		encoder2[3] = HAL_GPIO_ReadPin(ENCODER_M_R4_GPIO_Port,ENCODER_M_R4_Pin);
 8001612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001618:	f002 f99c 	bl	8003954 <HAL_GPIO_ReadPin>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001622:	60da      	str	r2, [r3, #12]
	}
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020000 	.word	0x40020000
 8001630:	2000007c 	.word	0x2000007c
 8001634:	2000008c 	.word	0x2000008c
 8001638:	40020400 	.word	0x40020400
 800163c:	00000000 	.word	0x00000000

08001640 <Kinematic_Omni_Wheels>:

void Kinematic_Omni_Wheels() {
 8001640:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001644:	af00      	add	r7, sp, #0

    V0 = ((1/r)*(0.7071*Vx+0.7071*Vy)+Omega);
 8001646:	4b98      	ldr	r3, [pc, #608]	; (80018a8 <Kinematic_Omni_Wheels+0x268>)
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001650:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001654:	ee16 0a90 	vmov	r0, s13
 8001658:	f7fe ff22 	bl	80004a0 <__aeabi_f2d>
 800165c:	4604      	mov	r4, r0
 800165e:	460d      	mov	r5, r1
 8001660:	4b92      	ldr	r3, [pc, #584]	; (80018ac <Kinematic_Omni_Wheels+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff09 	bl	800047c <__aeabi_i2d>
 800166a:	a38b      	add	r3, pc, #556	; (adr r3, 8001898 <Kinematic_Omni_Wheels+0x258>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ff6e 	bl	8000550 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4690      	mov	r8, r2
 800167a:	4699      	mov	r9, r3
 800167c:	4b8c      	ldr	r3, [pc, #560]	; (80018b0 <Kinematic_Omni_Wheels+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fefb 	bl	800047c <__aeabi_i2d>
 8001686:	a384      	add	r3, pc, #528	; (adr r3, 8001898 <Kinematic_Omni_Wheels+0x258>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ff60 	bl	8000550 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4640      	mov	r0, r8
 8001696:	4649      	mov	r1, r9
 8001698:	f7fe fda4 	bl	80001e4 <__adddf3>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7fe ff54 	bl	8000550 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4614      	mov	r4, r2
 80016ae:	461d      	mov	r5, r3
 80016b0:	4b80      	ldr	r3, [pc, #512]	; (80018b4 <Kinematic_Omni_Wheels+0x274>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fee1 	bl	800047c <__aeabi_i2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4620      	mov	r0, r4
 80016c0:	4629      	mov	r1, r5
 80016c2:	f7fe fd8f 	bl	80001e4 <__adddf3>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff fa01 	bl	8000ad4 <__aeabi_d2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a78      	ldr	r2, [pc, #480]	; (80018b8 <Kinematic_Omni_Wheels+0x278>)
 80016d6:	6013      	str	r3, [r2, #0]
    V1 = ((1/r)*(0.7071*Vx-0.7071*Vy)+Omega);
 80016d8:	4b73      	ldr	r3, [pc, #460]	; (80018a8 <Kinematic_Omni_Wheels+0x268>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016e6:	ee16 0a90 	vmov	r0, s13
 80016ea:	f7fe fed9 	bl	80004a0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	4b6e      	ldr	r3, [pc, #440]	; (80018ac <Kinematic_Omni_Wheels+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fec0 	bl	800047c <__aeabi_i2d>
 80016fc:	a366      	add	r3, pc, #408	; (adr r3, 8001898 <Kinematic_Omni_Wheels+0x258>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe ff25 	bl	8000550 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4690      	mov	r8, r2
 800170c:	4699      	mov	r9, r3
 800170e:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <Kinematic_Omni_Wheels+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe feb2 	bl	800047c <__aeabi_i2d>
 8001718:	a35f      	add	r3, pc, #380	; (adr r3, 8001898 <Kinematic_Omni_Wheels+0x258>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff17 	bl	8000550 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4640      	mov	r0, r8
 8001728:	4649      	mov	r1, r9
 800172a:	f7fe fd59 	bl	80001e0 <__aeabi_dsub>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe ff0b 	bl	8000550 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <Kinematic_Omni_Wheels+0x274>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe98 	bl	800047c <__aeabi_i2d>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7fe fd46 	bl	80001e4 <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff f9b8 	bl	8000ad4 <__aeabi_d2f>
 8001764:	4603      	mov	r3, r0
 8001766:	4a55      	ldr	r2, [pc, #340]	; (80018bc <Kinematic_Omni_Wheels+0x27c>)
 8001768:	6013      	str	r3, [r2, #0]
    V2 = ((1/r)*(-0.7071*Vx-0.7071*Vy)+Omega);
 800176a:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <Kinematic_Omni_Wheels+0x268>)
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001774:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001778:	ee16 0a90 	vmov	r0, s13
 800177c:	f7fe fe90 	bl	80004a0 <__aeabi_f2d>
 8001780:	4604      	mov	r4, r0
 8001782:	460d      	mov	r5, r1
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <Kinematic_Omni_Wheels+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fe77 	bl	800047c <__aeabi_i2d>
 800178e:	a344      	add	r3, pc, #272	; (adr r3, 80018a0 <Kinematic_Omni_Wheels+0x260>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe fedc 	bl	8000550 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4690      	mov	r8, r2
 800179e:	4699      	mov	r9, r3
 80017a0:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <Kinematic_Omni_Wheels+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe69 	bl	800047c <__aeabi_i2d>
 80017aa:	a33b      	add	r3, pc, #236	; (adr r3, 8001898 <Kinematic_Omni_Wheels+0x258>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe fece 	bl	8000550 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4640      	mov	r0, r8
 80017ba:	4649      	mov	r1, r9
 80017bc:	f7fe fd10 	bl	80001e0 <__aeabi_dsub>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7fe fec2 	bl	8000550 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	461d      	mov	r5, r3
 80017d4:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <Kinematic_Omni_Wheels+0x274>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fe4f 	bl	800047c <__aeabi_i2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	f7fe fcfd 	bl	80001e4 <__adddf3>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff f96f 	bl	8000ad4 <__aeabi_d2f>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a31      	ldr	r2, [pc, #196]	; (80018c0 <Kinematic_Omni_Wheels+0x280>)
 80017fa:	6013      	str	r3, [r2, #0]
    V3 = ((1/r)*(-0.7071*Vx+0.7071*Vy)+Omega);
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <Kinematic_Omni_Wheels+0x268>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001806:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800180a:	ee16 0a90 	vmov	r0, s13
 800180e:	f7fe fe47 	bl	80004a0 <__aeabi_f2d>
 8001812:	4604      	mov	r4, r0
 8001814:	460d      	mov	r5, r1
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <Kinematic_Omni_Wheels+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe2e 	bl	800047c <__aeabi_i2d>
 8001820:	a31f      	add	r3, pc, #124	; (adr r3, 80018a0 <Kinematic_Omni_Wheels+0x260>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fe93 	bl	8000550 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4690      	mov	r8, r2
 8001830:	4699      	mov	r9, r3
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <Kinematic_Omni_Wheels+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe20 	bl	800047c <__aeabi_i2d>
 800183c:	a316      	add	r3, pc, #88	; (adr r3, 8001898 <Kinematic_Omni_Wheels+0x258>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7fe fe85 	bl	8000550 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4640      	mov	r0, r8
 800184c:	4649      	mov	r1, r9
 800184e:	f7fe fcc9 	bl	80001e4 <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fe79 	bl	8000550 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4614      	mov	r4, r2
 8001864:	461d      	mov	r5, r3
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <Kinematic_Omni_Wheels+0x274>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe06 	bl	800047c <__aeabi_i2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4620      	mov	r0, r4
 8001876:	4629      	mov	r1, r5
 8001878:	f7fe fcb4 	bl	80001e4 <__adddf3>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f926 	bl	8000ad4 <__aeabi_d2f>
 8001888:	4603      	mov	r3, r0
 800188a:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <Kinematic_Omni_Wheels+0x284>)
 800188c:	6013      	str	r3, [r2, #0]

}
 800188e:	bf00      	nop
 8001890:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001894:	f3af 8000 	nop.w
 8001898:	2de00d1b 	.word	0x2de00d1b
 800189c:	3fe6a090 	.word	0x3fe6a090
 80018a0:	2de00d1b 	.word	0x2de00d1b
 80018a4:	bfe6a090 	.word	0xbfe6a090
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000060 	.word	0x20000060
 80018b0:	20000064 	.word	0x20000064
 80018b4:	20000068 	.word	0x20000068
 80018b8:	2000006c 	.word	0x2000006c
 80018bc:	20000070 	.word	0x20000070
 80018c0:	20000074 	.word	0x20000074
 80018c4:	20000078 	.word	0x20000078

080018c8 <Encoder_M>:

void Encoder_M() {
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
	for(int i=0; i < 4; i++){
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	e098      	b.n	8001a06 <Encoder_M+0x13e>

		if(encoder1[i] != last_encoder1[i]){
 80018d4:	4a59      	ldr	r2, [pc, #356]	; (8001a3c <Encoder_M+0x174>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018dc:	4958      	ldr	r1, [pc, #352]	; (8001a40 <Encoder_M+0x178>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d040      	beq.n	800196a <Encoder_M+0xa2>
			last_encoder1[i] = encoder1[i];
 80018e8:	4a54      	ldr	r2, [pc, #336]	; (8001a3c <Encoder_M+0x174>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018f0:	4953      	ldr	r1, [pc, #332]	; (8001a40 <Encoder_M+0x178>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(encoder1[i] == 0){
 80018f8:	4a50      	ldr	r2, [pc, #320]	; (8001a3c <Encoder_M+0x174>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d119      	bne.n	8001938 <Encoder_M+0x70>
				if(encoder2[i] == 1){
 8001904:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <Encoder_M+0x17c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d109      	bne.n	8001924 <Encoder_M+0x5c>

					counter[i]++;
 8001910:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <Encoder_M+0x180>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	494b      	ldr	r1, [pc, #300]	; (8001a48 <Encoder_M+0x180>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001922:	e022      	b.n	800196a <Encoder_M+0xa2>
				}else{
					counter[i]--;
 8001924:	4a48      	ldr	r2, [pc, #288]	; (8001a48 <Encoder_M+0x180>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	4946      	ldr	r1, [pc, #280]	; (8001a48 <Encoder_M+0x180>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001936:	e018      	b.n	800196a <Encoder_M+0xa2>
				}
			}else{
				if(encoder2[i] == 0){
 8001938:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <Encoder_M+0x17c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <Encoder_M+0x90>
					counter[i]++;
 8001944:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <Encoder_M+0x180>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	493e      	ldr	r1, [pc, #248]	; (8001a48 <Encoder_M+0x180>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001956:	e008      	b.n	800196a <Encoder_M+0xa2>
				}else{
					counter[i]--;
 8001958:	4a3b      	ldr	r2, [pc, #236]	; (8001a48 <Encoder_M+0x180>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	1e5a      	subs	r2, r3, #1
 8001962:	4939      	ldr	r1, [pc, #228]	; (8001a48 <Encoder_M+0x180>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
			}
		}
		if(encoder2[i] != last_encoder2[i]){
 800196a:	4a36      	ldr	r2, [pc, #216]	; (8001a44 <Encoder_M+0x17c>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001972:	4936      	ldr	r1, [pc, #216]	; (8001a4c <Encoder_M+0x184>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800197a:	429a      	cmp	r2, r3
 800197c:	d040      	beq.n	8001a00 <Encoder_M+0x138>
			last_encoder2[i] = encoder2[i];
 800197e:	4a31      	ldr	r2, [pc, #196]	; (8001a44 <Encoder_M+0x17c>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001986:	4931      	ldr	r1, [pc, #196]	; (8001a4c <Encoder_M+0x184>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(encoder2[i] == 1){
 800198e:	4a2d      	ldr	r2, [pc, #180]	; (8001a44 <Encoder_M+0x17c>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d119      	bne.n	80019ce <Encoder_M+0x106>
				if(encoder1[i] == 1){
 800199a:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <Encoder_M+0x174>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d109      	bne.n	80019ba <Encoder_M+0xf2>
					counter[i]++;
 80019a6:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <Encoder_M+0x180>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	4925      	ldr	r1, [pc, #148]	; (8001a48 <Encoder_M+0x180>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80019b8:	e022      	b.n	8001a00 <Encoder_M+0x138>
				}else{
					counter[i]--;
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <Encoder_M+0x180>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	1e5a      	subs	r2, r3, #1
 80019c4:	4920      	ldr	r1, [pc, #128]	; (8001a48 <Encoder_M+0x180>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80019cc:	e018      	b.n	8001a00 <Encoder_M+0x138>
				}
			}else{
				if(encoder1[i] == 0){
 80019ce:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <Encoder_M+0x174>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <Encoder_M+0x126>
					counter[i]++;
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <Encoder_M+0x180>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	4918      	ldr	r1, [pc, #96]	; (8001a48 <Encoder_M+0x180>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80019ec:	e008      	b.n	8001a00 <Encoder_M+0x138>
				}else{
					counter[i]--;
 80019ee:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <Encoder_M+0x180>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	1e5a      	subs	r2, r3, #1
 80019f8:	4913      	ldr	r1, [pc, #76]	; (8001a48 <Encoder_M+0x180>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i < 4; i++){
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3301      	adds	r3, #1
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	f77f af63 	ble.w	80018d4 <Encoder_M+0xc>
				}
			}
		}
	}
	count[0] = counter[0];
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <Encoder_M+0x180>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <Encoder_M+0x188>)
 8001a14:	6013      	str	r3, [r2, #0]
	count[1] = counter[1];
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <Encoder_M+0x180>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <Encoder_M+0x188>)
 8001a1c:	6053      	str	r3, [r2, #4]
	count[2] = counter[2];
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <Encoder_M+0x180>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <Encoder_M+0x188>)
 8001a24:	6093      	str	r3, [r2, #8]
	count[3] = counter[3];
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <Encoder_M+0x180>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <Encoder_M+0x188>)
 8001a2c:	60d3      	str	r3, [r2, #12]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000007c 	.word	0x2000007c
 8001a40:	2000009c 	.word	0x2000009c
 8001a44:	2000008c 	.word	0x2000008c
 8001a48:	200000cc 	.word	0x200000cc
 8001a4c:	200000ac 	.word	0x200000ac
 8001a50:	200000dc 	.word	0x200000dc
 8001a54:	00000000 	.word	0x00000000

08001a58 <PID_Speed_Output>:

void PID_Speed_Output() {
 8001a58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0

	//    sampling time
	for (int i = 0; i < 4; i++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	e201      	b.n	8001e6a <PID_Speed_Output+0x412>
		T[i] = HAL_GetTick() - last_time[i];
 8001a66:	f001 f9c5 	bl	8002df4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	49bc      	ldr	r1, [pc, #752]	; (8001d60 <PID_Speed_Output+0x308>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	4619      	mov	r1, r3
 8001a78:	4aba      	ldr	r2, [pc, #744]	; (8001d64 <PID_Speed_Output+0x30c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (T[i] >= 10) {
 8001a80:	4ab8      	ldr	r2, [pc, #736]	; (8001d64 <PID_Speed_Output+0x30c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	f340 81eb 	ble.w	8001e64 <PID_Speed_Output+0x40c>

			setpoint[0] = V0;
 8001a8e:	4bb6      	ldr	r3, [pc, #728]	; (8001d68 <PID_Speed_Output+0x310>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4ab6      	ldr	r2, [pc, #728]	; (8001d6c <PID_Speed_Output+0x314>)
 8001a94:	6013      	str	r3, [r2, #0]
			setpoint[1] = V1;
 8001a96:	4bb6      	ldr	r3, [pc, #728]	; (8001d70 <PID_Speed_Output+0x318>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4ab4      	ldr	r2, [pc, #720]	; (8001d6c <PID_Speed_Output+0x314>)
 8001a9c:	6053      	str	r3, [r2, #4]
			setpoint[2] = V2;
 8001a9e:	4bb5      	ldr	r3, [pc, #724]	; (8001d74 <PID_Speed_Output+0x31c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4ab2      	ldr	r2, [pc, #712]	; (8001d6c <PID_Speed_Output+0x314>)
 8001aa4:	6093      	str	r3, [r2, #8]
			setpoint[3] = V3;
 8001aa6:	4bb4      	ldr	r3, [pc, #720]	; (8001d78 <PID_Speed_Output+0x320>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4ab0      	ldr	r2, [pc, #704]	; (8001d6c <PID_Speed_Output+0x314>)
 8001aac:	60d3      	str	r3, [r2, #12]

			count_second[i] = count[i] - last_count[i];
 8001aae:	4ab3      	ldr	r2, [pc, #716]	; (8001d7c <PID_Speed_Output+0x324>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ab6:	49b2      	ldr	r1, [pc, #712]	; (8001d80 <PID_Speed_Output+0x328>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	4aae      	ldr	r2, [pc, #696]	; (8001d84 <PID_Speed_Output+0x32c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
			RPS[i] = (count_second[i] * 100) / 1600;
 8001ad4:	4aab      	ldr	r2, [pc, #684]	; (8001d84 <PID_Speed_Output+0x32c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001d88 <PID_Speed_Output+0x330>
 8001ae4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ae8:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8001d8c <PID_Speed_Output+0x334>
 8001aec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af0:	4aa7      	ldr	r2, [pc, #668]	; (8001d90 <PID_Speed_Output+0x338>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	edc3 7a00 	vstr	s15, [r3]
			RPM[i] = (RPS[i] * 60);
 8001afc:	4aa4      	ldr	r2, [pc, #656]	; (8001d90 <PID_Speed_Output+0x338>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001d94 <PID_Speed_Output+0x33c>
 8001b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b10:	4aa1      	ldr	r2, [pc, #644]	; (8001d98 <PID_Speed_Output+0x340>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	edc3 7a00 	vstr	s15, [r3]
			last_count[i] = count[i];
 8001b1c:	4a97      	ldr	r2, [pc, #604]	; (8001d7c <PID_Speed_Output+0x324>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b24:	4996      	ldr	r1, [pc, #600]	; (8001d80 <PID_Speed_Output+0x328>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			last_time[i] = HAL_GetTick();
 8001b2c:	f001 f962 	bl	8002df4 <HAL_GetTick>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4619      	mov	r1, r3
 8001b34:	4a8a      	ldr	r2, [pc, #552]	; (8001d60 <PID_Speed_Output+0x308>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//
			current_time_PID[i] = HAL_GetTick();
 8001b3c:	f001 f95a 	bl	8002df4 <HAL_GetTick>
 8001b40:	ee07 0a90 	vmov	s15, r0
 8001b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b48:	4a94      	ldr	r2, [pc, #592]	; (8001d9c <PID_Speed_Output+0x344>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	edc3 7a00 	vstr	s15, [r3]
			eslapedtime[i] = current_time_PID[i] - last_time_PID[i];
 8001b54:	4a91      	ldr	r2, [pc, #580]	; (8001d9c <PID_Speed_Output+0x344>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	ed93 7a00 	vldr	s14, [r3]
 8001b60:	4a8f      	ldr	r2, [pc, #572]	; (8001da0 <PID_Speed_Output+0x348>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b70:	4a8c      	ldr	r2, [pc, #560]	; (8001da4 <PID_Speed_Output+0x34c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	edc3 7a00 	vstr	s15, [r3]
			error[i] = setpoint[i] - RPM[i];
 8001b7c:	4a7b      	ldr	r2, [pc, #492]	; (8001d6c <PID_Speed_Output+0x314>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	ed93 7a00 	vldr	s14, [r3]
 8001b88:	4a83      	ldr	r2, [pc, #524]	; (8001d98 <PID_Speed_Output+0x340>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	ee17 0a90 	vmov	r0, s15
 8001b9c:	f7fe fc80 	bl	80004a0 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4880      	ldr	r0, [pc, #512]	; (8001da8 <PID_Speed_Output+0x350>)
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	00c9      	lsls	r1, r1, #3
 8001baa:	4401      	add	r1, r0
 8001bac:	e9c1 2300 	strd	r2, r3, [r1]
			in[i] = in[i] + (error[i] * eslapedtime[i]);
 8001bb0:	4a7e      	ldr	r2, [pc, #504]	; (8001dac <PID_Speed_Output+0x354>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc70 	bl	80004a0 <__aeabi_f2d>
 8001bc0:	4680      	mov	r8, r0
 8001bc2:	4689      	mov	r9, r1
 8001bc4:	4a78      	ldr	r2, [pc, #480]	; (8001da8 <PID_Speed_Output+0x350>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001bd0:	4a74      	ldr	r2, [pc, #464]	; (8001da4 <PID_Speed_Output+0x34c>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc60 	bl	80004a0 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f7fe fcb2 	bl	8000550 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4640      	mov	r0, r8
 8001bf2:	4649      	mov	r1, r9
 8001bf4:	f7fe faf6 	bl	80001e4 <__adddf3>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7fe ff68 	bl	8000ad4 <__aeabi_d2f>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4969      	ldr	r1, [pc, #420]	; (8001dac <PID_Speed_Output+0x354>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	601a      	str	r2, [r3, #0]
			dev[i] = (error[i] - last_Error[i]) / eslapedtime[i];
 8001c10:	4a65      	ldr	r2, [pc, #404]	; (8001da8 <PID_Speed_Output+0x350>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001c1c:	4a64      	ldr	r2, [pc, #400]	; (8001db0 <PID_Speed_Output+0x358>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc3a 	bl	80004a0 <__aeabi_f2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7fe fad4 	bl	80001e0 <__aeabi_dsub>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	461d      	mov	r5, r3
 8001c40:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <PID_Speed_Output+0x34c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fc28 	bl	80004a0 <__aeabi_f2d>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4620      	mov	r0, r4
 8001c56:	4629      	mov	r1, r5
 8001c58:	f7fe fda4 	bl	80007a4 <__aeabi_ddiv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f7fe ff36 	bl	8000ad4 <__aeabi_d2f>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4952      	ldr	r1, [pc, #328]	; (8001db4 <PID_Speed_Output+0x35c>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	601a      	str	r2, [r3, #0]

			pid[i] = Kp * error[i] + Ki * in[i] + Kd * dev[i];
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <PID_Speed_Output+0x360>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc11 	bl	80004a0 <__aeabi_f2d>
 8001c7e:	4a4a      	ldr	r2, [pc, #296]	; (8001da8 <PID_Speed_Output+0x350>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fc61 	bl	8000550 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4614      	mov	r4, r2
 8001c94:	461d      	mov	r5, r3
 8001c96:	4a45      	ldr	r2, [pc, #276]	; (8001dac <PID_Speed_Output+0x354>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	ed93 7a00 	vldr	s14, [r3]
 8001ca2:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <PID_Speed_Output+0x364>)
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cac:	ee17 0a90 	vmov	r0, s15
 8001cb0:	f7fe fbf6 	bl	80004a0 <__aeabi_f2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f7fe fa92 	bl	80001e4 <__adddf3>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	4a3a      	ldr	r2, [pc, #232]	; (8001db4 <PID_Speed_Output+0x35c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	ed93 7a00 	vldr	s14, [r3]
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <PID_Speed_Output+0x368>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cde:	ee17 0a90 	vmov	r0, s15
 8001ce2:	f7fe fbdd 	bl	80004a0 <__aeabi_f2d>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4620      	mov	r0, r4
 8001cec:	4629      	mov	r1, r5
 8001cee:	f7fe fa79 	bl	80001e4 <__adddf3>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4833      	ldr	r0, [pc, #204]	; (8001dc4 <PID_Speed_Output+0x36c>)
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	00c9      	lsls	r1, r1, #3
 8001cfc:	4401      	add	r1, r0
 8001cfe:	e9c1 2300 	strd	r2, r3, [r1]

			// constrain value
			if (pid[i] < -850) {
 8001d02:	4a30      	ldr	r2, [pc, #192]	; (8001dc4 <PID_Speed_Output+0x36c>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d0e:	a312      	add	r3, pc, #72	; (adr r3, 8001d58 <PID_Speed_Output+0x300>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fe8e 	bl	8000a34 <__aeabi_dcmplt>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <PID_Speed_Output+0x2d2>
				pwm_M[i] = -850;
 8001d1e:	4a2a      	ldr	r2, [pc, #168]	; (8001dc8 <PID_Speed_Output+0x370>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <PID_Speed_Output+0x374>)
 8001d28:	601a      	str	r2, [r3, #0]
			}
			if (pid[i] > 850) {
 8001d2a:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <PID_Speed_Output+0x36c>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <PID_Speed_Output+0x378>)
 8001d3c:	f7fe fe98 	bl	8000a70 <__aeabi_dcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d048      	beq.n	8001dd8 <PID_Speed_Output+0x380>
				pwm_M[i] = 850;
 8001d46:	4a20      	ldr	r2, [pc, #128]	; (8001dc8 <PID_Speed_Output+0x370>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <PID_Speed_Output+0x37c>)
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e041      	b.n	8001dd8 <PID_Speed_Output+0x380>
 8001d54:	f3af 8000 	nop.w
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	c08a9000 	.word	0xc08a9000
 8001d60:	200000ec 	.word	0x200000ec
 8001d64:	200000fc 	.word	0x200000fc
 8001d68:	2000006c 	.word	0x2000006c
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	20000070 	.word	0x20000070
 8001d74:	20000074 	.word	0x20000074
 8001d78:	20000078 	.word	0x20000078
 8001d7c:	200000dc 	.word	0x200000dc
 8001d80:	200000bc 	.word	0x200000bc
 8001d84:	2000012c 	.word	0x2000012c
 8001d88:	42c80000 	.word	0x42c80000
 8001d8c:	44c80000 	.word	0x44c80000
 8001d90:	2000011c 	.word	0x2000011c
 8001d94:	42700000 	.word	0x42700000
 8001d98:	2000010c 	.word	0x2000010c
 8001d9c:	2000014c 	.word	0x2000014c
 8001da0:	2000013c 	.word	0x2000013c
 8001da4:	2000015c 	.word	0x2000015c
 8001da8:	200001a0 	.word	0x200001a0
 8001dac:	2000017c 	.word	0x2000017c
 8001db0:	2000016c 	.word	0x2000016c
 8001db4:	2000018c 	.word	0x2000018c
 8001db8:	2000001c 	.word	0x2000001c
 8001dbc:	20000024 	.word	0x20000024
 8001dc0:	20000020 	.word	0x20000020
 8001dc4:	200001c0 	.word	0x200001c0
 8001dc8:	200001e0 	.word	0x200001e0
 8001dcc:	c4548000 	.word	0xc4548000
 8001dd0:	408a9000 	.word	0x408a9000
 8001dd4:	44548000 	.word	0x44548000
			}
			if (-850 <= pid[i] && pid[i] <= 850) {
 8001dd8:	4a2b      	ldr	r2, [pc, #172]	; (8001e88 <PID_Speed_Output+0x430>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de4:	a326      	add	r3, pc, #152	; (adr r3, 8001e80 <PID_Speed_Output+0x428>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	f7fe fe37 	bl	8000a5c <__aeabi_dcmpge>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01d      	beq.n	8001e30 <PID_Speed_Output+0x3d8>
 8001df4:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <PID_Speed_Output+0x430>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <PID_Speed_Output+0x434>)
 8001e06:	f7fe fe1f 	bl	8000a48 <__aeabi_dcmple>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00f      	beq.n	8001e30 <PID_Speed_Output+0x3d8>
				pwm_M[i] = pid[i];
 8001e10:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <PID_Speed_Output+0x430>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7fe fe58 	bl	8000ad4 <__aeabi_d2f>
 8001e24:	4602      	mov	r2, r0
 8001e26:	491a      	ldr	r1, [pc, #104]	; (8001e90 <PID_Speed_Output+0x438>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	601a      	str	r2, [r3, #0]
			}
			//////////////////////
			last_Error[i] = error[i];
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <PID_Speed_Output+0x43c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe fe48 	bl	8000ad4 <__aeabi_d2f>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4914      	ldr	r1, [pc, #80]	; (8001e98 <PID_Speed_Output+0x440>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	601a      	str	r2, [r3, #0]
			last_time_PID[i] = current_time_PID[i];
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <PID_Speed_Output+0x444>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4911      	ldr	r1, [pc, #68]	; (8001ea0 <PID_Speed_Output+0x448>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3301      	adds	r3, #1
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	f77f adfa 	ble.w	8001a66 <PID_Speed_Output+0xe>
//	             pre_in[i]=in[i];
////	             pre_dev[i]=dev[i];
		}
	}

}
 8001e72:	bf00      	nop
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e7e:	bf00      	nop
 8001e80:	00000000 	.word	0x00000000
 8001e84:	c08a9000 	.word	0xc08a9000
 8001e88:	200001c0 	.word	0x200001c0
 8001e8c:	408a9000 	.word	0x408a9000
 8001e90:	200001e0 	.word	0x200001e0
 8001e94:	200001a0 	.word	0x200001a0
 8001e98:	2000016c 	.word	0x2000016c
 8001e9c:	2000014c 	.word	0x2000014c
 8001ea0:	2000013c 	.word	0x2000013c

08001ea4 <Motor_Speed>:

void Motor_Speed() {
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

	//M1
	if (pwm_M[0] > 0) {
 8001ea8:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <Motor_Speed+0x200>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	dd0d      	ble.n	8001ed4 <Motor_Speed+0x30>
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_L1, pwm_M[0]);
 8001eb8:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <Motor_Speed+0x200>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	4b7a      	ldr	r3, [pc, #488]	; (80020a8 <Motor_Speed+0x204>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec6:	ee17 2a90 	vmov	r2, s15
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_R1, 0);
 8001ecc:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <Motor_Speed+0x204>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (pwm_M[0] < 0) {
 8001ed4:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <Motor_Speed+0x200>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	d50f      	bpl.n	8001f04 <Motor_Speed+0x60>
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_L1, 0);
 8001ee4:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <Motor_Speed+0x204>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_R1, (-1) * pwm_M[0]);
 8001eec:	4b6d      	ldr	r3, [pc, #436]	; (80020a4 <Motor_Speed+0x200>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	eef1 7a67 	vneg.f32	s15, s15
 8001ef6:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <Motor_Speed+0x204>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001efe:	ee17 2a90 	vmov	r2, s15
 8001f02:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (pwm_M[0] == 0) {
 8001f04:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <Motor_Speed+0x200>)
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f12:	d107      	bne.n	8001f24 <Motor_Speed+0x80>
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_L1, 0);
 8001f14:	4b64      	ldr	r3, [pc, #400]	; (80020a8 <Motor_Speed+0x204>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_R1, 0);
 8001f1c:	4b62      	ldr	r3, [pc, #392]	; (80020a8 <Motor_Speed+0x204>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	639a      	str	r2, [r3, #56]	; 0x38
	}
	  //M2
	if (pwm_M[1] > 0) {
 8001f24:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <Motor_Speed+0x200>)
 8001f26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	dd0d      	ble.n	8001f50 <Motor_Speed+0xac>
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_L2, pwm_M[1]);
 8001f34:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <Motor_Speed+0x200>)
 8001f36:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <Motor_Speed+0x204>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f42:	ee17 2a90 	vmov	r2, s15
 8001f46:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_R2, 0);
 8001f48:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <Motor_Speed+0x204>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if (pwm_M[1] < 0) {
 8001f50:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <Motor_Speed+0x200>)
 8001f52:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	d50f      	bpl.n	8001f80 <Motor_Speed+0xdc>
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_L2, 0);
 8001f60:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <Motor_Speed+0x204>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_R2, (-1) * pwm_M[1]);
 8001f68:	4b4e      	ldr	r3, [pc, #312]	; (80020a4 <Motor_Speed+0x200>)
 8001f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f6e:	eef1 7a67 	vneg.f32	s15, s15
 8001f72:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <Motor_Speed+0x204>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f7a:	ee17 2a90 	vmov	r2, s15
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if (pwm_M[1] == 0) {
 8001f80:	4b48      	ldr	r3, [pc, #288]	; (80020a4 <Motor_Speed+0x200>)
 8001f82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	d107      	bne.n	8001fa0 <Motor_Speed+0xfc>
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_L2, 0);
 8001f90:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <Motor_Speed+0x204>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_R2, 0);
 8001f98:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <Motor_Speed+0x204>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
	}
//	M3
	if (pwm_M[2] > 0) {
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <Motor_Speed+0x200>)
 8001fa2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	dd0d      	ble.n	8001fcc <Motor_Speed+0x128>
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_L3, pwm_M[2]);
 8001fb0:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <Motor_Speed+0x200>)
 8001fb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <Motor_Speed+0x208>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbe:	ee17 2a90 	vmov	r2, s15
 8001fc2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_R3, 0);
 8001fc4:	4b39      	ldr	r3, [pc, #228]	; (80020ac <Motor_Speed+0x208>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (pwm_M[2] < 0) {
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <Motor_Speed+0x200>)
 8001fce:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fda:	d50f      	bpl.n	8001ffc <Motor_Speed+0x158>
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_L3, 0);
 8001fdc:	4b33      	ldr	r3, [pc, #204]	; (80020ac <Motor_Speed+0x208>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_R3, (-1) * pwm_M[2]);
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <Motor_Speed+0x200>)
 8001fe6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fea:	eef1 7a67 	vneg.f32	s15, s15
 8001fee:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <Motor_Speed+0x208>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff6:	ee17 2a90 	vmov	r2, s15
 8001ffa:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (pwm_M[2] == 0) {
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <Motor_Speed+0x200>)
 8001ffe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002002:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	d107      	bne.n	800201c <Motor_Speed+0x178>
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_L3, 0);
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <Motor_Speed+0x208>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_R3, 0);
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <Motor_Speed+0x208>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	639a      	str	r2, [r3, #56]	; 0x38
	}
//	//M4
	if (pwm_M[3] > 0) {
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <Motor_Speed+0x200>)
 800201e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202a:	dd0d      	ble.n	8002048 <Motor_Speed+0x1a4>
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_L4, pwm_M[3]);
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <Motor_Speed+0x200>)
 800202e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <Motor_Speed+0x208>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800203a:	ee17 2a90 	vmov	r2, s15
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_R4, 0);
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <Motor_Speed+0x208>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if (pwm_M[3] < 0) {
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <Motor_Speed+0x200>)
 800204a:	edd3 7a03 	vldr	s15, [r3, #12]
 800204e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	d50f      	bpl.n	8002078 <Motor_Speed+0x1d4>
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_L4, 0);
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <Motor_Speed+0x208>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_R4, (-1) * pwm_M[3]);
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <Motor_Speed+0x200>)
 8002062:	edd3 7a03 	vldr	s15, [r3, #12]
 8002066:	eef1 7a67 	vneg.f32	s15, s15
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <Motor_Speed+0x208>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002072:	ee17 2a90 	vmov	r2, s15
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if (pwm_M[3] == 0) {
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <Motor_Speed+0x200>)
 800207a:	edd3 7a03 	vldr	s15, [r3, #12]
 800207e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	d107      	bne.n	8002098 <Motor_Speed+0x1f4>
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_L4, 0);
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <Motor_Speed+0x208>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, MOTOR_R4, 0);
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <Motor_Speed+0x208>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
	}

}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	200001e0 	.word	0x200001e0
 80020a8:	20000290 	.word	0x20000290
 80020ac:	200002d8 	.word	0x200002d8

080020b0 <reset_data>:


void reset_data(void) {
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
	RxData[0] = 128;    //x1
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <reset_data+0x40>)
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	701a      	strb	r2, [r3, #0]
	RxData[1] = 128;    //y1
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <reset_data+0x40>)
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	705a      	strb	r2, [r3, #1]
	RxData[2] = 128;    //x2
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <reset_data+0x40>)
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	709a      	strb	r2, [r3, #2]
	RxData[3] = 128; //y2
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <reset_data+0x40>)
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	70da      	strb	r2, [r3, #3]
	RxData[4] = 128; //y2
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <reset_data+0x40>)
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	711a      	strb	r2, [r3, #4]
	RxData[5] = 128; //y2
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <reset_data+0x40>)
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	715a      	strb	r2, [r3, #5]
	RxData[6] = 0; //y2
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <reset_data+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	719a      	strb	r2, [r3, #6]
	RxData[7] = 0; //y2
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <reset_data+0x40>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	71da      	strb	r2, [r3, #7]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000054 	.word	0x20000054
 80020f4:	00000000 	.word	0x00000000

080020f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020fc:	f000 fe14 	bl	8002d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002100:	f000 f8f2 	bl	80022e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002104:	f7ff f926 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 8002108:	f7ff f8fc 	bl	8001304 <MX_DMA_Init>
  MX_SPI1_Init();
 800210c:	f000 f95c 	bl	80023c8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002110:	f000 face 	bl	80026b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002114:	f000 fb62 	bl	80027dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002118:	f000 fbf8 	bl	800290c <MX_TIM4_Init>
  MX_TIM1_Init();
 800211c:	f000 fa78 	bl	8002610 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	//PWM Motor
	HAL_TIM_PWM_Start(&htim2, MOTOR_L1);
 8002120:	2100      	movs	r1, #0
 8002122:	4867      	ldr	r0, [pc, #412]	; (80022c0 <main+0x1c8>)
 8002124:	f002 ff30 	bl	8004f88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, MOTOR_R1);
 8002128:	2104      	movs	r1, #4
 800212a:	4865      	ldr	r0, [pc, #404]	; (80022c0 <main+0x1c8>)
 800212c:	f002 ff2c 	bl	8004f88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, MOTOR_L2);
 8002130:	2108      	movs	r1, #8
 8002132:	4863      	ldr	r0, [pc, #396]	; (80022c0 <main+0x1c8>)
 8002134:	f002 ff28 	bl	8004f88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, MOTOR_R2);
 8002138:	210c      	movs	r1, #12
 800213a:	4861      	ldr	r0, [pc, #388]	; (80022c0 <main+0x1c8>)
 800213c:	f002 ff24 	bl	8004f88 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, MOTOR_L3);
 8002140:	2100      	movs	r1, #0
 8002142:	4860      	ldr	r0, [pc, #384]	; (80022c4 <main+0x1cc>)
 8002144:	f002 ff20 	bl	8004f88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, MOTOR_R3);
 8002148:	2104      	movs	r1, #4
 800214a:	485e      	ldr	r0, [pc, #376]	; (80022c4 <main+0x1cc>)
 800214c:	f002 ff1c 	bl	8004f88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, MOTOR_L4);
 8002150:	2108      	movs	r1, #8
 8002152:	485c      	ldr	r0, [pc, #368]	; (80022c4 <main+0x1cc>)
 8002154:	f002 ff18 	bl	8004f88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, MOTOR_R4);
 8002158:	210c      	movs	r1, #12
 800215a:	485a      	ldr	r0, [pc, #360]	; (80022c4 <main+0x1cc>)
 800215c:	f002 ff14 	bl	8004f88 <HAL_TIM_PWM_Start>
	//PWM Ultrasonic
	HAL_TIM_Base_Start(&htim1);
 8002160:	4859      	ldr	r0, [pc, #356]	; (80022c8 <main+0x1d0>)
 8002162:	f002 fe5d 	bl	8004e20 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800216c:	4857      	ldr	r0, [pc, #348]	; (80022cc <main+0x1d4>)
 800216e:	f001 fc09 	bl	8003984 <HAL_GPIO_WritePin>

	NRF24_Init();
 8002172:	f7fe ffc1 	bl	80010f8 <NRF24_Init>
	NRF24_RxMode(Rxaddr, 112, 8); //NRF24_TxMode(Address, channel, payload_size)
 8002176:	2208      	movs	r2, #8
 8002178:	2170      	movs	r1, #112	; 0x70
 800217a:	4855      	ldr	r0, [pc, #340]	; (80022d0 <main+0x1d8>)
 800217c:	f7ff f822 	bl	80011c4 <NRF24_RxMode>
	RxData[0] = 128;  //x1
 8002180:	4b54      	ldr	r3, [pc, #336]	; (80022d4 <main+0x1dc>)
 8002182:	2280      	movs	r2, #128	; 0x80
 8002184:	701a      	strb	r2, [r3, #0]
	RxData[1] = 128;  //y1
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <main+0x1dc>)
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	705a      	strb	r2, [r3, #1]
	RxData[2] = 128;  //x2
 800218c:	4b51      	ldr	r3, [pc, #324]	; (80022d4 <main+0x1dc>)
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	709a      	strb	r2, [r3, #2]
	RxData[3] = 128; //y2
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <main+0x1dc>)
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	70da      	strb	r2, [r3, #3]
	RxData[4] = 128; //y2
 8002198:	4b4e      	ldr	r3, [pc, #312]	; (80022d4 <main+0x1dc>)
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	711a      	strb	r2, [r3, #4]
	RxData[5] = 128; //y2
 800219e:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <main+0x1dc>)
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	715a      	strb	r2, [r3, #5]
	RxData[6] = 0; //y2
 80021a4:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <main+0x1dc>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	719a      	strb	r2, [r3, #6]
	RxData[7] = 0; //y2
 80021aa:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <main+0x1dc>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	71da      	strb	r2, [r3, #7]

    /* USER CODE BEGIN 3 */



		if (DataReady(1) > 0) {
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7ff f845 	bl	8001240 <DataReady>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dd08      	ble.n	80021ce <main+0xd6>
			NRF24_Receive(RxData, 8);
 80021bc:	2108      	movs	r1, #8
 80021be:	4845      	ldr	r0, [pc, #276]	; (80022d4 <main+0x1dc>)
 80021c0:	f7ff f86e 	bl	80012a0 <NRF24_Receive>
			lastTime = HAL_GetTick();
 80021c4:	f000 fe16 	bl	8002df4 <HAL_GetTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4a43      	ldr	r2, [pc, #268]	; (80022d8 <main+0x1e0>)
 80021cc:	6013      	str	r3, [r2, #0]
		}
		if ((HAL_GetTick() - lastTime > 10)) {
 80021ce:	f000 fe11 	bl	8002df4 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <main+0x1e0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b0a      	cmp	r3, #10
 80021dc:	d901      	bls.n	80021e2 <main+0xea>
			reset_data();
 80021de:	f7ff ff67 	bl	80020b0 <reset_data>
		}

		Vx = map(RxData[0], 0, 256, -300, 300);
 80021e2:	4b3c      	ldr	r3, [pc, #240]	; (80022d4 <main+0x1dc>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f938 	bl	800045c <__aeabi_ui2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	ed9f 4b2b 	vldr	d4, [pc, #172]	; 80022a0 <main+0x1a8>
 80021f4:	ed9f 3b2c 	vldr	d3, [pc, #176]	; 80022a8 <main+0x1b0>
 80021f8:	ed9f 2b2d 	vldr	d2, [pc, #180]	; 80022b0 <main+0x1b8>
 80021fc:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 80022b8 <main+0x1c0>
 8002200:	ec43 2b10 	vmov	d0, r2, r3
 8002204:	f7ff f97e 	bl	8001504 <map>
 8002208:	ec53 2b10 	vmov	r2, r3, d0
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	f7fe fc38 	bl	8000a84 <__aeabi_d2iz>
 8002214:	4603      	mov	r3, r0
 8002216:	4a31      	ldr	r2, [pc, #196]	; (80022dc <main+0x1e4>)
 8002218:	6013      	str	r3, [r2, #0]
		Vy = map(RxData[1], 0, 256, -300, 300);
 800221a:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <main+0x1dc>)
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f91c 	bl	800045c <__aeabi_ui2d>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 80022a0 <main+0x1a8>
 800222c:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 80022a8 <main+0x1b0>
 8002230:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 80022b0 <main+0x1b8>
 8002234:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80022b8 <main+0x1c0>
 8002238:	ec43 2b10 	vmov	d0, r2, r3
 800223c:	f7ff f962 	bl	8001504 <map>
 8002240:	ec53 2b10 	vmov	r2, r3, d0
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fc1c 	bl	8000a84 <__aeabi_d2iz>
 800224c:	4603      	mov	r3, r0
 800224e:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <main+0x1e8>)
 8002250:	6013      	str	r3, [r2, #0]
		Omega = map(RxData[2], 0, 256, -300, 300);
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <main+0x1dc>)
 8002254:	789b      	ldrb	r3, [r3, #2]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f900 	bl	800045c <__aeabi_ui2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 80022a0 <main+0x1a8>
 8002264:	ed9f 3b10 	vldr	d3, [pc, #64]	; 80022a8 <main+0x1b0>
 8002268:	ed9f 2b11 	vldr	d2, [pc, #68]	; 80022b0 <main+0x1b8>
 800226c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80022b8 <main+0x1c0>
 8002270:	ec43 2b10 	vmov	d0, r2, r3
 8002274:	f7ff f946 	bl	8001504 <map>
 8002278:	ec53 2b10 	vmov	r2, r3, d0
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fc00 	bl	8000a84 <__aeabi_d2iz>
 8002284:	4603      	mov	r3, r0
 8002286:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <main+0x1ec>)
 8002288:	6013      	str	r3, [r2, #0]

//
		Kinematic_Omni_Wheels();
 800228a:	f7ff f9d9 	bl	8001640 <Kinematic_Omni_Wheels>
		Encoder_M();
 800228e:	f7ff fb1b 	bl	80018c8 <Encoder_M>
		PID_Speed_Output();
 8002292:	f7ff fbe1 	bl	8001a58 <PID_Speed_Output>
		Motor_Speed();
 8002296:	f7ff fe05 	bl	8001ea4 <Motor_Speed>
		if (DataReady(1) > 0) {
 800229a:	e789      	b.n	80021b0 <main+0xb8>
 800229c:	f3af 8000 	nop.w
 80022a0:	00000000 	.word	0x00000000
 80022a4:	4072c000 	.word	0x4072c000
 80022a8:	00000000 	.word	0x00000000
 80022ac:	c072c000 	.word	0xc072c000
 80022b0:	00000000 	.word	0x00000000
 80022b4:	40700000 	.word	0x40700000
	...
 80022c0:	20000290 	.word	0x20000290
 80022c4:	200002d8 	.word	0x200002d8
 80022c8:	20000248 	.word	0x20000248
 80022cc:	40020000 	.word	0x40020000
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000054 	.word	0x20000054
 80022d8:	2000005c 	.word	0x2000005c
 80022dc:	20000060 	.word	0x20000060
 80022e0:	20000064 	.word	0x20000064
 80022e4:	20000068 	.word	0x20000068

080022e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b094      	sub	sp, #80	; 0x50
 80022ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ee:	f107 0320 	add.w	r3, r7, #32
 80022f2:	2230      	movs	r2, #48	; 0x30
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fbde 	bl	8005ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <SystemClock_Config+0xcc>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	4a27      	ldr	r2, [pc, #156]	; (80023b4 <SystemClock_Config+0xcc>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231a:	6413      	str	r3, [r2, #64]	; 0x40
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <SystemClock_Config+0xcc>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <SystemClock_Config+0xd0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002334:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <SystemClock_Config+0xd0>)
 8002336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <SystemClock_Config+0xd0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002348:	2301      	movs	r3, #1
 800234a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800234c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002352:	2302      	movs	r3, #2
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800235c:	230f      	movs	r3, #15
 800235e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002360:	2360      	movs	r3, #96	; 0x60
 8002362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002364:	2302      	movs	r3, #2
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002368:	2304      	movs	r3, #4
 800236a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	4618      	mov	r0, r3
 8002372:	f001 fb39 	bl	80039e8 <HAL_RCC_OscConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800237c:	f000 f81e 	bl	80023bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002380:	230f      	movs	r3, #15
 8002382:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002384:	2302      	movs	r3, #2
 8002386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800238c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	2102      	movs	r1, #2
 800239c:	4618      	mov	r0, r3
 800239e:	f001 fd9b 	bl	8003ed8 <HAL_RCC_ClockConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80023a8:	f000 f808 	bl	80023bc <Error_Handler>
  }
}
 80023ac:	bf00      	nop
 80023ae:	3750      	adds	r7, #80	; 0x50
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40007000 	.word	0x40007000

080023bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c0:	b672      	cpsid	i
}
 80023c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023c4:	e7fe      	b.n	80023c4 <Error_Handler+0x8>
	...

080023c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <MX_SPI1_Init+0x64>)
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <MX_SPI1_Init+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <MX_SPI1_Init+0x64>)
 80023d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <MX_SPI1_Init+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <MX_SPI1_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_SPI1_Init+0x64>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_SPI1_Init+0x64>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_SPI1_Init+0x64>)
 80023f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_SPI1_Init+0x64>)
 80023fc:	2220      	movs	r2, #32
 80023fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <MX_SPI1_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_SPI1_Init+0x64>)
 8002408:	2200      	movs	r2, #0
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <MX_SPI1_Init+0x64>)
 800240e:	2200      	movs	r2, #0
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_SPI1_Init+0x64>)
 8002414:	220a      	movs	r2, #10
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <MX_SPI1_Init+0x64>)
 800241a:	f001 ff09 	bl	8004230 <HAL_SPI_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002424:	f7ff ffca 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200001f0 	.word	0x200001f0
 8002430:	40013000 	.word	0x40013000

08002434 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <HAL_SPI_MspInit+0x84>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d12b      	bne.n	80024ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_SPI_MspInit+0x88>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_SPI_MspInit+0x88>)
 8002460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_SPI_MspInit+0x88>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_SPI_MspInit+0x88>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a10      	ldr	r2, [pc, #64]	; (80024bc <HAL_SPI_MspInit+0x88>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_SPI_MspInit+0x88>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800248e:	2338      	movs	r3, #56	; 0x38
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800249e:	2305      	movs	r3, #5
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <HAL_SPI_MspInit+0x8c>)
 80024aa:	f001 f8cf 	bl	800364c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40013000 	.word	0x40013000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020400 	.word	0x40020400

080024c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_MspInit+0x4c>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <HAL_MspInit+0x4c>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d8:	6453      	str	r3, [r2, #68]	; 0x44
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_MspInit+0x4c>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_MspInit+0x4c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_MspInit+0x4c>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_MspInit+0x4c>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <NMI_Handler+0x4>

0800251a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <HardFault_Handler+0x4>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <MemManage_Handler+0x4>

08002526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <UsageFault_Handler+0x4>

08002532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002560:	f000 fc34 	bl	8002dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800256c:	2004      	movs	r0, #4
 800256e:	f001 fa23 	bl	80039b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}

08002576 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800257a:	2010      	movs	r0, #16
 800257c:	f001 fa1c 	bl	80039b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <DMA1_Stream6_IRQHandler+0x10>)
 800258a:	f000 fe23 	bl	80031d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200003c8 	.word	0x200003c8

08002598 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800259c:	2020      	movs	r0, #32
 800259e:	f001 fa0b 	bl	80039b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80025aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025ae:	f001 fa03 	bl	80039b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80025b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80025b6:	f001 f9ff 	bl	80039b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80025ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025be:	f001 f9fb 	bl	80039b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80025c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025c6:	f001 f9f7 	bl	80039b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80025ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025ce:	f001 f9f3 	bl	80039b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <DMA1_Stream7_IRQHandler+0x10>)
 80025de:	f000 fdf9 	bl	80031d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000368 	.word	0x20000368

080025ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <SystemInit+0x20>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <SystemInit+0x20>)
 80025f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim4_ch3;
DMA_HandleTypeDef hdma_tim4_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	463b      	mov	r3, r7
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800262c:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <MX_TIM1_Init+0x98>)
 800262e:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <MX_TIM1_Init+0x9c>)
 8002630:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <MX_TIM1_Init+0x98>)
 8002634:	224f      	movs	r2, #79	; 0x4f
 8002636:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <MX_TIM1_Init+0x98>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800263e:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <MX_TIM1_Init+0x98>)
 8002640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002644:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <MX_TIM1_Init+0x98>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <MX_TIM1_Init+0x98>)
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <MX_TIM1_Init+0x98>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002658:	4813      	ldr	r0, [pc, #76]	; (80026a8 <MX_TIM1_Init+0x98>)
 800265a:	f002 fb91 	bl	8004d80 <HAL_TIM_Base_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002664:	f7ff feaa 	bl	80023bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800266c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800266e:	f107 0308 	add.w	r3, r7, #8
 8002672:	4619      	mov	r1, r3
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <MX_TIM1_Init+0x98>)
 8002676:	f002 fdf9 	bl	800526c <HAL_TIM_ConfigClockSource>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002680:	f7ff fe9c 	bl	80023bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800268c:	463b      	mov	r3, r7
 800268e:	4619      	mov	r1, r3
 8002690:	4805      	ldr	r0, [pc, #20]	; (80026a8 <MX_TIM1_Init+0x98>)
 8002692:	f003 f97f 	bl	8005994 <HAL_TIMEx_MasterConfigSynchronization>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800269c:	f7ff fe8e 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026a0:	bf00      	nop
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000248 	.word	0x20000248
 80026ac:	40010000 	.word	0x40010000

080026b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08e      	sub	sp, #56	; 0x38
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c4:	f107 0320 	add.w	r3, r7, #32
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
 80026dc:	615a      	str	r2, [r3, #20]
 80026de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026e0:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <MX_TIM2_Init+0x128>)
 80026e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80026e8:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <MX_TIM2_Init+0x128>)
 80026ea:	2207      	movs	r2, #7
 80026ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ee:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <MX_TIM2_Init+0x128>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80026f4:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <MX_TIM2_Init+0x128>)
 80026f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fc:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <MX_TIM2_Init+0x128>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002702:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <MX_TIM2_Init+0x128>)
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002708:	4833      	ldr	r0, [pc, #204]	; (80027d8 <MX_TIM2_Init+0x128>)
 800270a:	f002 fb39 	bl	8004d80 <HAL_TIM_Base_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002714:	f7ff fe52 	bl	80023bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800271e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002722:	4619      	mov	r1, r3
 8002724:	482c      	ldr	r0, [pc, #176]	; (80027d8 <MX_TIM2_Init+0x128>)
 8002726:	f002 fda1 	bl	800526c <HAL_TIM_ConfigClockSource>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002730:	f7ff fe44 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002734:	4828      	ldr	r0, [pc, #160]	; (80027d8 <MX_TIM2_Init+0x128>)
 8002736:	f002 fbcd 	bl	8004ed4 <HAL_TIM_PWM_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002740:	f7ff fe3c 	bl	80023bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	4619      	mov	r1, r3
 8002752:	4821      	ldr	r0, [pc, #132]	; (80027d8 <MX_TIM2_Init+0x128>)
 8002754:	f003 f91e 	bl	8005994 <HAL_TIMEx_MasterConfigSynchronization>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800275e:	f7ff fe2d 	bl	80023bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002762:	2360      	movs	r3, #96	; 0x60
 8002764:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	2200      	movs	r2, #0
 8002776:	4619      	mov	r1, r3
 8002778:	4817      	ldr	r0, [pc, #92]	; (80027d8 <MX_TIM2_Init+0x128>)
 800277a:	f002 fcb5 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002784:	f7ff fe1a 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2204      	movs	r2, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4812      	ldr	r0, [pc, #72]	; (80027d8 <MX_TIM2_Init+0x128>)
 8002790:	f002 fcaa 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800279a:	f7ff fe0f 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	2208      	movs	r2, #8
 80027a2:	4619      	mov	r1, r3
 80027a4:	480c      	ldr	r0, [pc, #48]	; (80027d8 <MX_TIM2_Init+0x128>)
 80027a6:	f002 fc9f 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80027b0:	f7ff fe04 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	220c      	movs	r2, #12
 80027b8:	4619      	mov	r1, r3
 80027ba:	4807      	ldr	r0, [pc, #28]	; (80027d8 <MX_TIM2_Init+0x128>)
 80027bc:	f002 fc94 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80027c6:	f7ff fdf9 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027ca:	4803      	ldr	r0, [pc, #12]	; (80027d8 <MX_TIM2_Init+0x128>)
 80027cc:	f000 f9de 	bl	8002b8c <HAL_TIM_MspPostInit>

}
 80027d0:	bf00      	nop
 80027d2:	3738      	adds	r7, #56	; 0x38
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000290 	.word	0x20000290

080027dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08e      	sub	sp, #56	; 0x38
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f0:	f107 0320 	add.w	r3, r7, #32
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
 8002808:	615a      	str	r2, [r3, #20]
 800280a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800280c:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <MX_TIM3_Init+0x128>)
 800280e:	4a3e      	ldr	r2, [pc, #248]	; (8002908 <MX_TIM3_Init+0x12c>)
 8002810:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8002812:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <MX_TIM3_Init+0x128>)
 8002814:	2207      	movs	r2, #7
 8002816:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <MX_TIM3_Init+0x128>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800281e:	4b39      	ldr	r3, [pc, #228]	; (8002904 <MX_TIM3_Init+0x128>)
 8002820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002824:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002826:	4b37      	ldr	r3, [pc, #220]	; (8002904 <MX_TIM3_Init+0x128>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282c:	4b35      	ldr	r3, [pc, #212]	; (8002904 <MX_TIM3_Init+0x128>)
 800282e:	2200      	movs	r2, #0
 8002830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002832:	4834      	ldr	r0, [pc, #208]	; (8002904 <MX_TIM3_Init+0x128>)
 8002834:	f002 faa4 	bl	8004d80 <HAL_TIM_Base_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800283e:	f7ff fdbd 	bl	80023bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800284c:	4619      	mov	r1, r3
 800284e:	482d      	ldr	r0, [pc, #180]	; (8002904 <MX_TIM3_Init+0x128>)
 8002850:	f002 fd0c 	bl	800526c <HAL_TIM_ConfigClockSource>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800285a:	f7ff fdaf 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800285e:	4829      	ldr	r0, [pc, #164]	; (8002904 <MX_TIM3_Init+0x128>)
 8002860:	f002 fb38 	bl	8004ed4 <HAL_TIM_PWM_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800286a:	f7ff fda7 	bl	80023bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002876:	f107 0320 	add.w	r3, r7, #32
 800287a:	4619      	mov	r1, r3
 800287c:	4821      	ldr	r0, [pc, #132]	; (8002904 <MX_TIM3_Init+0x128>)
 800287e:	f003 f889 	bl	8005994 <HAL_TIMEx_MasterConfigSynchronization>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002888:	f7ff fd98 	bl	80023bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800288c:	2360      	movs	r3, #96	; 0x60
 800288e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2200      	movs	r2, #0
 80028a0:	4619      	mov	r1, r3
 80028a2:	4818      	ldr	r0, [pc, #96]	; (8002904 <MX_TIM3_Init+0x128>)
 80028a4:	f002 fc20 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80028ae:	f7ff fd85 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	2204      	movs	r2, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4812      	ldr	r0, [pc, #72]	; (8002904 <MX_TIM3_Init+0x128>)
 80028ba:	f002 fc15 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80028c4:	f7ff fd7a 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	2208      	movs	r2, #8
 80028cc:	4619      	mov	r1, r3
 80028ce:	480d      	ldr	r0, [pc, #52]	; (8002904 <MX_TIM3_Init+0x128>)
 80028d0:	f002 fc0a 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80028da:	f7ff fd6f 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	220c      	movs	r2, #12
 80028e2:	4619      	mov	r1, r3
 80028e4:	4807      	ldr	r0, [pc, #28]	; (8002904 <MX_TIM3_Init+0x128>)
 80028e6:	f002 fbff 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80028f0:	f7ff fd64 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028f4:	4803      	ldr	r0, [pc, #12]	; (8002904 <MX_TIM3_Init+0x128>)
 80028f6:	f000 f949 	bl	8002b8c <HAL_TIM_MspPostInit>

}
 80028fa:	bf00      	nop
 80028fc:	3738      	adds	r7, #56	; 0x38
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200002d8 	.word	0x200002d8
 8002908:	40000400 	.word	0x40000400

0800290c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08e      	sub	sp, #56	; 0x38
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002920:	f107 0320 	add.w	r3, r7, #32
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
 8002938:	615a      	str	r2, [r3, #20]
 800293a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <MX_TIM4_Init+0xe4>)
 800293e:	4a2d      	ldr	r2, [pc, #180]	; (80029f4 <MX_TIM4_Init+0xe8>)
 8002940:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002942:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <MX_TIM4_Init+0xe4>)
 8002944:	2200      	movs	r2, #0
 8002946:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002948:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <MX_TIM4_Init+0xe4>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800294e:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <MX_TIM4_Init+0xe4>)
 8002950:	2263      	movs	r2, #99	; 0x63
 8002952:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002954:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <MX_TIM4_Init+0xe4>)
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295a:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <MX_TIM4_Init+0xe4>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002960:	4823      	ldr	r0, [pc, #140]	; (80029f0 <MX_TIM4_Init+0xe4>)
 8002962:	f002 fa0d 	bl	8004d80 <HAL_TIM_Base_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800296c:	f7ff fd26 	bl	80023bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800297a:	4619      	mov	r1, r3
 800297c:	481c      	ldr	r0, [pc, #112]	; (80029f0 <MX_TIM4_Init+0xe4>)
 800297e:	f002 fc75 	bl	800526c <HAL_TIM_ConfigClockSource>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002988:	f7ff fd18 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800298c:	4818      	ldr	r0, [pc, #96]	; (80029f0 <MX_TIM4_Init+0xe4>)
 800298e:	f002 faa1 	bl	8004ed4 <HAL_TIM_PWM_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002998:	f7ff fd10 	bl	80023bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029a4:	f107 0320 	add.w	r3, r7, #32
 80029a8:	4619      	mov	r1, r3
 80029aa:	4811      	ldr	r0, [pc, #68]	; (80029f0 <MX_TIM4_Init+0xe4>)
 80029ac:	f002 fff2 	bl	8005994 <HAL_TIMEx_MasterConfigSynchronization>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80029b6:	f7ff fd01 	bl	80023bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ba:	2360      	movs	r3, #96	; 0x60
 80029bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	2208      	movs	r2, #8
 80029ce:	4619      	mov	r1, r3
 80029d0:	4807      	ldr	r0, [pc, #28]	; (80029f0 <MX_TIM4_Init+0xe4>)
 80029d2:	f002 fb89 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80029dc:	f7ff fcee 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029e0:	4803      	ldr	r0, [pc, #12]	; (80029f0 <MX_TIM4_Init+0xe4>)
 80029e2:	f000 f8d3 	bl	8002b8c <HAL_TIM_MspPostInit>

}
 80029e6:	bf00      	nop
 80029e8:	3738      	adds	r7, #56	; 0x38
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000320 	.word	0x20000320
 80029f4:	40000800 	.word	0x40000800

080029f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a59      	ldr	r2, [pc, #356]	; (8002b6c <HAL_TIM_Base_MspInit+0x174>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10e      	bne.n	8002a28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a57      	ldr	r2, [pc, #348]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a26:	e09c      	b.n	8002b62 <HAL_TIM_Base_MspInit+0x16a>
  else if(tim_baseHandle->Instance==TIM2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a30:	d10e      	bne.n	8002a50 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	4b4e      	ldr	r3, [pc, #312]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a4d      	ldr	r2, [pc, #308]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b4b      	ldr	r3, [pc, #300]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]
}
 8002a4e:	e088      	b.n	8002b62 <HAL_TIM_Base_MspInit+0x16a>
  else if(tim_baseHandle->Instance==TIM3)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a47      	ldr	r2, [pc, #284]	; (8002b74 <HAL_TIM_Base_MspInit+0x17c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10e      	bne.n	8002a78 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	4b44      	ldr	r3, [pc, #272]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a43      	ldr	r2, [pc, #268]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
}
 8002a76:	e074      	b.n	8002b62 <HAL_TIM_Base_MspInit+0x16a>
  else if(tim_baseHandle->Instance==TIM4)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a3e      	ldr	r2, [pc, #248]	; (8002b78 <HAL_TIM_Base_MspInit+0x180>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d16f      	bne.n	8002b62 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4a39      	ldr	r2, [pc, #228]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
 8002a92:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <HAL_TIM_Base_MspInit+0x178>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002a9e:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002aa0:	4a37      	ldr	r2, [pc, #220]	; (8002b80 <HAL_TIM_Base_MspInit+0x188>)
 8002aa2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002aa4:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aaa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aac:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab2:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002ab8:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002abe:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002ac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ac6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002aca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ace:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002ad8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002adc:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ade:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002ae4:	4825      	ldr	r0, [pc, #148]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002ae6:	f000 fac7 	bl	8003078 <HAL_DMA_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_TIM_Base_MspInit+0xfc>
      Error_Handler();
 8002af0:	f7ff fc64 	bl	80023bc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002afa:	4a20      	ldr	r2, [pc, #128]	; (8002b7c <HAL_TIM_Base_MspInit+0x184>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b02:	4a21      	ldr	r2, [pc, #132]	; (8002b88 <HAL_TIM_Base_MspInit+0x190>)
 8002b04:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8002b06:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b0c:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b10:	2240      	movs	r2, #64	; 0x40
 8002b12:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b20:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b28:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b30:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b3e:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002b46:	480f      	ldr	r0, [pc, #60]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b48:	f000 fa96 	bl	8003078 <HAL_DMA_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_TIM_Base_MspInit+0x15e>
      Error_Handler();
 8002b52:	f7ff fc33 	bl	80023bc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b5a:	621a      	str	r2, [r3, #32]
 8002b5c:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <HAL_TIM_Base_MspInit+0x18c>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	20000368 	.word	0x20000368
 8002b80:	400260b8 	.word	0x400260b8
 8002b84:	200003c8 	.word	0x200003c8
 8002b88:	400260a0 	.word	0x400260a0

08002b8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08c      	sub	sp, #48	; 0x30
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d11e      	bne.n	8002bec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	4a42      	ldr	r2, [pc, #264]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbe:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002bca:	230f      	movs	r3, #15
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	4837      	ldr	r0, [pc, #220]	; (8002cc4 <HAL_TIM_MspPostInit+0x138>)
 8002be6:	f000 fd31 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bea:	e065      	b.n	8002cb8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM3)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a35      	ldr	r2, [pc, #212]	; (8002cc8 <HAL_TIM_MspPostInit+0x13c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d13c      	bne.n	8002c70 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a30      	ldr	r2, [pc, #192]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a29      	ldr	r2, [pc, #164]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c2e:	23c0      	movs	r3, #192	; 0xc0
 8002c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	f107 031c 	add.w	r3, r7, #28
 8002c46:	4619      	mov	r1, r3
 8002c48:	481e      	ldr	r0, [pc, #120]	; (8002cc4 <HAL_TIM_MspPostInit+0x138>)
 8002c4a:	f000 fcff 	bl	800364c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	4619      	mov	r1, r3
 8002c68:	4818      	ldr	r0, [pc, #96]	; (8002ccc <HAL_TIM_MspPostInit+0x140>)
 8002c6a:	f000 fcef 	bl	800364c <HAL_GPIO_Init>
}
 8002c6e:	e023      	b.n	8002cb8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <HAL_TIM_MspPostInit+0x144>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d11e      	bne.n	8002cb8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_TIM_MspPostInit+0x134>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cac:	f107 031c 	add.w	r3, r7, #28
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4806      	ldr	r0, [pc, #24]	; (8002ccc <HAL_TIM_MspPostInit+0x140>)
 8002cb4:	f000 fcca 	bl	800364c <HAL_GPIO_Init>
}
 8002cb8:	bf00      	nop
 8002cba:	3730      	adds	r7, #48	; 0x30
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40020400 	.word	0x40020400
 8002cd0:	40000800 	.word	0x40000800

08002cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cd8:	480d      	ldr	r0, [pc, #52]	; (8002d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cda:	490e      	ldr	r1, [pc, #56]	; (8002d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce0:	e002      	b.n	8002ce8 <LoopCopyDataInit>

08002ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce6:	3304      	adds	r3, #4

08002ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cec:	d3f9      	bcc.n	8002ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cf0:	4c0b      	ldr	r4, [pc, #44]	; (8002d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf4:	e001      	b.n	8002cfa <LoopFillZerobss>

08002cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf8:	3204      	adds	r2, #4

08002cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cfc:	d3fb      	bcc.n	8002cf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cfe:	f7ff fc75 	bl	80025ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d02:	f002 feb5 	bl	8005a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d06:	f7ff f9f7 	bl	80020f8 <main>
  bx  lr    
 8002d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d14:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002d18:	08005b20 	.word	0x08005b20
  ldr r2, =_sbss
 8002d1c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8002d20:	2000042c 	.word	0x2000042c

08002d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d24:	e7fe      	b.n	8002d24 <ADC_IRQHandler>
	...

08002d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_Init+0x40>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <HAL_Init+0x40>)
 8002d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_Init+0x40>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <HAL_Init+0x40>)
 8002d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_Init+0x40>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_Init+0x40>)
 8002d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d50:	2003      	movs	r0, #3
 8002d52:	f000 f94f 	bl	8002ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d56:	200f      	movs	r0, #15
 8002d58:	f000 f808 	bl	8002d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d5c:	f7ff fbb2 	bl	80024c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023c00 	.word	0x40023c00

08002d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_InitTick+0x54>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_InitTick+0x58>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f967 	bl	800305e <HAL_SYSTICK_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00e      	b.n	8002db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	d80a      	bhi.n	8002db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da0:	2200      	movs	r2, #0
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f000 f92f 	bl	800300a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dac:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <HAL_InitTick+0x5c>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000028 	.word	0x20000028
 8002dc4:	20000030 	.word	0x20000030
 8002dc8:	2000002c 	.word	0x2000002c

08002dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x20>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_IncTick+0x24>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <HAL_IncTick+0x24>)
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000030 	.word	0x20000030
 8002df0:	20000428 	.word	0x20000428

08002df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return uwTick;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_GetTick+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000428 	.word	0x20000428

08002e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff ffee 	bl	8002df4 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d005      	beq.n	8002e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_Delay+0x44>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4413      	add	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e32:	bf00      	nop
 8002e34:	f7ff ffde 	bl	8002df4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d8f7      	bhi.n	8002e34 <HAL_Delay+0x28>
  {
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000030 	.word	0x20000030

08002e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db0b      	blt.n	8002ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <__NVIC_EnableIRQ+0x38>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2001      	movs	r0, #1
 8002eda:	fa00 f202 	lsl.w	r2, r0, r2
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000e100 	.word	0xe000e100

08002ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	db0a      	blt.n	8002f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	490c      	ldr	r1, [pc, #48]	; (8002f40 <__NVIC_SetPriority+0x4c>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	0112      	lsls	r2, r2, #4
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	440b      	add	r3, r1
 8002f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f1c:	e00a      	b.n	8002f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	4908      	ldr	r1, [pc, #32]	; (8002f44 <__NVIC_SetPriority+0x50>)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	3b04      	subs	r3, #4
 8002f2c:	0112      	lsls	r2, r2, #4
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	440b      	add	r3, r1
 8002f32:	761a      	strb	r2, [r3, #24]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000e100 	.word	0xe000e100
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f1c3 0307 	rsb	r3, r3, #7
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	bf28      	it	cs
 8002f66:	2304      	movcs	r3, #4
 8002f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d902      	bls.n	8002f78 <NVIC_EncodePriority+0x30>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3b03      	subs	r3, #3
 8002f76:	e000      	b.n	8002f7a <NVIC_EncodePriority+0x32>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f90:	f04f 31ff 	mov.w	r1, #4294967295
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43d9      	mvns	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	4313      	orrs	r3, r2
         );
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3724      	adds	r7, #36	; 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc0:	d301      	bcc.n	8002fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00f      	b.n	8002fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <SysTick_Config+0x40>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fce:	210f      	movs	r1, #15
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	f7ff ff8e 	bl	8002ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <SysTick_Config+0x40>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <SysTick_Config+0x40>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	e000e010 	.word	0xe000e010

08002ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff29 	bl	8002e54 <__NVIC_SetPriorityGrouping>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	4603      	mov	r3, r0
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800301c:	f7ff ff3e 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8003020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f7ff ff8e 	bl	8002f48 <NVIC_EncodePriority>
 800302c:	4602      	mov	r2, r0
 800302e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff5d 	bl	8002ef4 <__NVIC_SetPriority>
}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800304c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff31 	bl	8002eb8 <__NVIC_EnableIRQ>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ffa2 	bl	8002fb0 <SysTick_Config>
 800306c:	4603      	mov	r3, r0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003084:	f7ff feb6 	bl	8002df4 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e099      	b.n	80031c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b4:	e00f      	b.n	80030d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030b6:	f7ff fe9d 	bl	8002df4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d908      	bls.n	80030d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2203      	movs	r2, #3
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e078      	b.n	80031c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e8      	bne.n	80030b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <HAL_DMA_Init+0x158>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003102:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800311a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2b04      	cmp	r3, #4
 800312e:	d107      	bne.n	8003140 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	4313      	orrs	r3, r2
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f023 0307 	bic.w	r3, r3, #7
 8003156:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2b04      	cmp	r3, #4
 8003168:	d117      	bne.n	800319a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00e      	beq.n	800319a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f9e9 	bl	8003554 <DMA_CheckFifoParam>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003196:	2301      	movs	r3, #1
 8003198:	e016      	b.n	80031c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9a0 	bl	80034e8 <DMA_CalcBaseAndBitshift>
 80031a8:	4603      	mov	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	223f      	movs	r2, #63	; 0x3f
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	f010803f 	.word	0xf010803f

080031d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031e0:	4b8e      	ldr	r3, [pc, #568]	; (800341c <HAL_DMA_IRQHandler+0x248>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a8e      	ldr	r2, [pc, #568]	; (8003420 <HAL_DMA_IRQHandler+0x24c>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	0a9b      	lsrs	r3, r3, #10
 80031ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	2208      	movs	r2, #8
 8003200:	409a      	lsls	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01a      	beq.n	8003240 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0204 	bic.w	r2, r2, #4
 8003226:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2208      	movs	r2, #8
 800322e:	409a      	lsls	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	f043 0201 	orr.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	2201      	movs	r2, #1
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	2201      	movs	r2, #1
 8003264:	409a      	lsls	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	f043 0202 	orr.w	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	2204      	movs	r2, #4
 800327c:	409a      	lsls	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d012      	beq.n	80032ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	2204      	movs	r2, #4
 800329a:	409a      	lsls	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	2210      	movs	r2, #16
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d043      	beq.n	8003344 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d03c      	beq.n	8003344 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	2210      	movs	r2, #16
 80032d0:	409a      	lsls	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d018      	beq.n	8003316 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d108      	bne.n	8003304 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d024      	beq.n	8003344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
 8003302:	e01f      	b.n	8003344 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01b      	beq.n	8003344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
 8003314:	e016      	b.n	8003344 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d107      	bne.n	8003334 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0208 	bic.w	r2, r2, #8
 8003332:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	2220      	movs	r2, #32
 800334a:	409a      	lsls	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 808f 	beq.w	8003474 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8087 	beq.w	8003474 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	2220      	movs	r2, #32
 800336c:	409a      	lsls	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b05      	cmp	r3, #5
 800337c:	d136      	bne.n	80033ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0216 	bic.w	r2, r2, #22
 800338c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800339c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d103      	bne.n	80033ae <HAL_DMA_IRQHandler+0x1da>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0208 	bic.w	r2, r2, #8
 80033bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	223f      	movs	r2, #63	; 0x3f
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d07e      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
        }
        return;
 80033ea:	e079      	b.n	80034e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01d      	beq.n	8003436 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10d      	bne.n	8003424 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	2b00      	cmp	r3, #0
 800340e:	d031      	beq.n	8003474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
 8003418:	e02c      	b.n	8003474 <HAL_DMA_IRQHandler+0x2a0>
 800341a:	bf00      	nop
 800341c:	20000028 	.word	0x20000028
 8003420:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d023      	beq.n	8003474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
 8003434:	e01e      	b.n	8003474 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10f      	bne.n	8003464 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0210 	bic.w	r2, r2, #16
 8003452:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	2b00      	cmp	r3, #0
 800347a:	d032      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d022      	beq.n	80034ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2205      	movs	r2, #5
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3301      	adds	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d307      	bcc.n	80034bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f2      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x2cc>
 80034ba:	e000      	b.n	80034be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
 80034de:	e000      	b.n	80034e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034e0:	bf00      	nop
    }
  }
}
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	3b10      	subs	r3, #16
 80034f8:	4a14      	ldr	r2, [pc, #80]	; (800354c <DMA_CalcBaseAndBitshift+0x64>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003502:	4a13      	ldr	r2, [pc, #76]	; (8003550 <DMA_CalcBaseAndBitshift+0x68>)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4413      	add	r3, r2
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d909      	bls.n	800352a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	1d1a      	adds	r2, r3, #4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	659a      	str	r2, [r3, #88]	; 0x58
 8003528:	e007      	b.n	800353a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003532:	f023 0303 	bic.w	r3, r3, #3
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	aaaaaaab 	.word	0xaaaaaaab
 8003550:	08005b08 	.word	0x08005b08

08003554 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d11f      	bne.n	80035ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d856      	bhi.n	8003622 <DMA_CheckFifoParam+0xce>
 8003574:	a201      	add	r2, pc, #4	; (adr r2, 800357c <DMA_CheckFifoParam+0x28>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	0800358d 	.word	0x0800358d
 8003580:	0800359f 	.word	0x0800359f
 8003584:	0800358d 	.word	0x0800358d
 8003588:	08003623 	.word	0x08003623
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d046      	beq.n	8003626 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359c:	e043      	b.n	8003626 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035a6:	d140      	bne.n	800362a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ac:	e03d      	b.n	800362a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b6:	d121      	bne.n	80035fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d837      	bhi.n	800362e <DMA_CheckFifoParam+0xda>
 80035be:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <DMA_CheckFifoParam+0x70>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	080035d5 	.word	0x080035d5
 80035c8:	080035db 	.word	0x080035db
 80035cc:	080035d5 	.word	0x080035d5
 80035d0:	080035ed 	.word	0x080035ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      break;
 80035d8:	e030      	b.n	800363c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d025      	beq.n	8003632 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ea:	e022      	b.n	8003632 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035f4:	d11f      	bne.n	8003636 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035fa:	e01c      	b.n	8003636 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d903      	bls.n	800360a <DMA_CheckFifoParam+0xb6>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d003      	beq.n	8003610 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003608:	e018      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
      break;
 800360e:	e015      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      break;
 8003620:	e00b      	b.n	800363a <DMA_CheckFifoParam+0xe6>
      break;
 8003622:	bf00      	nop
 8003624:	e00a      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;
 8003626:	bf00      	nop
 8003628:	e008      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;
 800362a:	bf00      	nop
 800362c:	e006      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;
 800362e:	bf00      	nop
 8003630:	e004      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;
 8003632:	bf00      	nop
 8003634:	e002      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;   
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;
 800363a:	bf00      	nop
    }
  } 
  
  return status; 
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop

0800364c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e159      	b.n	800391c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	429a      	cmp	r2, r3
 8003682:	f040 8148 	bne.w	8003916 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d005      	beq.n	800369e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369a:	2b02      	cmp	r3, #2
 800369c:	d130      	bne.n	8003700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2203      	movs	r2, #3
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d4:	2201      	movs	r2, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 0201 	and.w	r2, r3, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b03      	cmp	r3, #3
 800370a:	d017      	beq.n	800373c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d123      	bne.n	8003790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	08da      	lsrs	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3208      	adds	r2, #8
 8003750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	220f      	movs	r2, #15
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	08da      	lsrs	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3208      	adds	r2, #8
 800378a:	69b9      	ldr	r1, [r7, #24]
 800378c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0203 	and.w	r2, r3, #3
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80a2 	beq.w	8003916 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	4b57      	ldr	r3, [pc, #348]	; (8003934 <HAL_GPIO_Init+0x2e8>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	4a56      	ldr	r2, [pc, #344]	; (8003934 <HAL_GPIO_Init+0x2e8>)
 80037dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e0:	6453      	str	r3, [r2, #68]	; 0x44
 80037e2:	4b54      	ldr	r3, [pc, #336]	; (8003934 <HAL_GPIO_Init+0x2e8>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ee:	4a52      	ldr	r2, [pc, #328]	; (8003938 <HAL_GPIO_Init+0x2ec>)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	3302      	adds	r3, #2
 80037f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	220f      	movs	r2, #15
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a49      	ldr	r2, [pc, #292]	; (800393c <HAL_GPIO_Init+0x2f0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d019      	beq.n	800384e <HAL_GPIO_Init+0x202>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a48      	ldr	r2, [pc, #288]	; (8003940 <HAL_GPIO_Init+0x2f4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <HAL_GPIO_Init+0x1fe>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a47      	ldr	r2, [pc, #284]	; (8003944 <HAL_GPIO_Init+0x2f8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00d      	beq.n	8003846 <HAL_GPIO_Init+0x1fa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a46      	ldr	r2, [pc, #280]	; (8003948 <HAL_GPIO_Init+0x2fc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d007      	beq.n	8003842 <HAL_GPIO_Init+0x1f6>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a45      	ldr	r2, [pc, #276]	; (800394c <HAL_GPIO_Init+0x300>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <HAL_GPIO_Init+0x1f2>
 800383a:	2304      	movs	r3, #4
 800383c:	e008      	b.n	8003850 <HAL_GPIO_Init+0x204>
 800383e:	2307      	movs	r3, #7
 8003840:	e006      	b.n	8003850 <HAL_GPIO_Init+0x204>
 8003842:	2303      	movs	r3, #3
 8003844:	e004      	b.n	8003850 <HAL_GPIO_Init+0x204>
 8003846:	2302      	movs	r3, #2
 8003848:	e002      	b.n	8003850 <HAL_GPIO_Init+0x204>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_GPIO_Init+0x204>
 800384e:	2300      	movs	r3, #0
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	f002 0203 	and.w	r2, r2, #3
 8003856:	0092      	lsls	r2, r2, #2
 8003858:	4093      	lsls	r3, r2
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003860:	4935      	ldr	r1, [pc, #212]	; (8003938 <HAL_GPIO_Init+0x2ec>)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	3302      	adds	r3, #2
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800386e:	4b38      	ldr	r3, [pc, #224]	; (8003950 <HAL_GPIO_Init+0x304>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003892:	4a2f      	ldr	r2, [pc, #188]	; (8003950 <HAL_GPIO_Init+0x304>)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003898:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_GPIO_Init+0x304>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038bc:	4a24      	ldr	r2, [pc, #144]	; (8003950 <HAL_GPIO_Init+0x304>)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038c2:	4b23      	ldr	r3, [pc, #140]	; (8003950 <HAL_GPIO_Init+0x304>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038e6:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <HAL_GPIO_Init+0x304>)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038ec:	4b18      	ldr	r3, [pc, #96]	; (8003950 <HAL_GPIO_Init+0x304>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003910:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <HAL_GPIO_Init+0x304>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3301      	adds	r3, #1
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b0f      	cmp	r3, #15
 8003920:	f67f aea2 	bls.w	8003668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	3724      	adds	r7, #36	; 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	40013800 	.word	0x40013800
 800393c:	40020000 	.word	0x40020000
 8003940:	40020400 	.word	0x40020400
 8003944:	40020800 	.word	0x40020800
 8003948:	40020c00 	.word	0x40020c00
 800394c:	40021000 	.word	0x40021000
 8003950:	40013c00 	.word	0x40013c00

08003954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	e001      	b.n	8003976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	807b      	strh	r3, [r7, #2]
 8003990:	4613      	mov	r3, r2
 8003992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003994:	787b      	ldrb	r3, [r7, #1]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800399a:	887a      	ldrh	r2, [r7, #2]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a0:	e003      	b.n	80039aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039a2:	887b      	ldrh	r3, [r7, #2]
 80039a4:	041a      	lsls	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	619a      	str	r2, [r3, #24]
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039ce:	4a05      	ldr	r2, [pc, #20]	; (80039e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd fdda 	bl	8001590 <HAL_GPIO_EXTI_Callback>
  }
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40013c00 	.word	0x40013c00

080039e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e267      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d075      	beq.n	8003af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a06:	4b88      	ldr	r3, [pc, #544]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d00c      	beq.n	8003a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a12:	4b85      	ldr	r3, [pc, #532]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d112      	bne.n	8003a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1e:	4b82      	ldr	r3, [pc, #520]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2a:	d10b      	bne.n	8003a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	4b7e      	ldr	r3, [pc, #504]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d05b      	beq.n	8003af0 <HAL_RCC_OscConfig+0x108>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d157      	bne.n	8003af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e242      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d106      	bne.n	8003a5c <HAL_RCC_OscConfig+0x74>
 8003a4e:	4b76      	ldr	r3, [pc, #472]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a75      	ldr	r2, [pc, #468]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e01d      	b.n	8003a98 <HAL_RCC_OscConfig+0xb0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x98>
 8003a66:	4b70      	ldr	r3, [pc, #448]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6f      	ldr	r2, [pc, #444]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b6d      	ldr	r3, [pc, #436]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a6c      	ldr	r2, [pc, #432]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCC_OscConfig+0xb0>
 8003a80:	4b69      	ldr	r3, [pc, #420]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a68      	ldr	r2, [pc, #416]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b66      	ldr	r3, [pc, #408]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a65      	ldr	r2, [pc, #404]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7ff f9a8 	bl	8002df4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7ff f9a4 	bl	8002df4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e207      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0xc0>
 8003ac6:	e014      	b.n	8003af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7ff f994 	bl	8002df4 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7ff f990 	bl	8002df4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e1f3      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae2:	4b51      	ldr	r3, [pc, #324]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0xe8>
 8003aee:	e000      	b.n	8003af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d063      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afe:	4b4a      	ldr	r3, [pc, #296]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0a:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d11c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b16:	4b44      	ldr	r3, [pc, #272]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d116      	bne.n	8003b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b22:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_RCC_OscConfig+0x152>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d001      	beq.n	8003b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e1c7      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4937      	ldr	r1, [pc, #220]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4e:	e03a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d020      	beq.n	8003b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b58:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <HAL_RCC_OscConfig+0x244>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5e:	f7ff f949 	bl	8002df4 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b66:	f7ff f945 	bl	8002df4 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e1a8      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b78:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b84:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4925      	ldr	r1, [pc, #148]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]
 8003b98:	e015      	b.n	8003bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_RCC_OscConfig+0x244>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7ff f928 	bl	8002df4 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba8:	f7ff f924 	bl	8002df4 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e187      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bba:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d036      	beq.n	8003c40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d016      	beq.n	8003c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <HAL_RCC_OscConfig+0x248>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7ff f908 	bl	8002df4 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be8:	f7ff f904 	bl	8002df4 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e167      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x200>
 8003c06:	e01b      	b.n	8003c40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <HAL_RCC_OscConfig+0x248>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0e:	f7ff f8f1 	bl	8002df4 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c14:	e00e      	b.n	8003c34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c16:	f7ff f8ed 	bl	8002df4 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d907      	bls.n	8003c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e150      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	42470000 	.word	0x42470000
 8003c30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ea      	bne.n	8003c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8097 	beq.w	8003d7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b81      	ldr	r3, [pc, #516]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	4b7d      	ldr	r3, [pc, #500]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	4a7c      	ldr	r2, [pc, #496]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6e:	4b7a      	ldr	r3, [pc, #488]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	4b77      	ldr	r3, [pc, #476]	; (8003e5c <HAL_RCC_OscConfig+0x474>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d118      	bne.n	8003cbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8a:	4b74      	ldr	r3, [pc, #464]	; (8003e5c <HAL_RCC_OscConfig+0x474>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a73      	ldr	r2, [pc, #460]	; (8003e5c <HAL_RCC_OscConfig+0x474>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c96:	f7ff f8ad 	bl	8002df4 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9e:	f7ff f8a9 	bl	8002df4 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e10c      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <HAL_RCC_OscConfig+0x474>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x2ea>
 8003cc4:	4b64      	ldr	r3, [pc, #400]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a63      	ldr	r2, [pc, #396]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd0:	e01c      	b.n	8003d0c <HAL_RCC_OscConfig+0x324>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x30c>
 8003cda:	4b5f      	ldr	r3, [pc, #380]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a5e      	ldr	r2, [pc, #376]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	f043 0304 	orr.w	r3, r3, #4
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce6:	4b5c      	ldr	r3, [pc, #368]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	4a5b      	ldr	r2, [pc, #364]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCC_OscConfig+0x324>
 8003cf4:	4b58      	ldr	r3, [pc, #352]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a57      	ldr	r2, [pc, #348]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cfa:	f023 0301 	bic.w	r3, r3, #1
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	4b55      	ldr	r3, [pc, #340]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a54      	ldr	r2, [pc, #336]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d06:	f023 0304 	bic.w	r3, r3, #4
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d015      	beq.n	8003d40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7ff f86e 	bl	8002df4 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1c:	f7ff f86a 	bl	8002df4 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e0cb      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d32:	4b49      	ldr	r3, [pc, #292]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0ee      	beq.n	8003d1c <HAL_RCC_OscConfig+0x334>
 8003d3e:	e014      	b.n	8003d6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d40:	f7ff f858 	bl	8002df4 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d48:	f7ff f854 	bl	8002df4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e0b5      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5e:	4b3e      	ldr	r3, [pc, #248]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1ee      	bne.n	8003d48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d105      	bne.n	8003d7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d70:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	4a38      	ldr	r2, [pc, #224]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a1 	beq.w	8003ec8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d86:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d05c      	beq.n	8003e4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d141      	bne.n	8003e1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9a:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <HAL_RCC_OscConfig+0x478>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7ff f828 	bl	8002df4 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da8:	f7ff f824 	bl	8002df4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e087      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69da      	ldr	r2, [r3, #28]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	3b01      	subs	r3, #1
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	491b      	ldr	r1, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_RCC_OscConfig+0x478>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fe fffd 	bl	8002df4 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfe:	f7fe fff9 	bl	8002df4 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e05c      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x416>
 8003e1c:	e054      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <HAL_RCC_OscConfig+0x478>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe ffe6 	bl	8002df4 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fe ffe2 	bl	8002df4 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e045      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x444>
 8003e4a:	e03d      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e038      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40007000 	.word	0x40007000
 8003e60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_RCC_OscConfig+0x4ec>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d028      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d121      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d11a      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e94:	4013      	ands	r3, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d111      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	3b01      	subs	r3, #1
 8003eae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d107      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800

08003ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0cc      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eec:	4b68      	ldr	r3, [pc, #416]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d90c      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b63      	ldr	r3, [pc, #396]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0b8      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a58      	ldr	r2, [pc, #352]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f50:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	494d      	ldr	r1, [pc, #308]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d044      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d119      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e07f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d003      	beq.n	8003f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d107      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f96:	4b3f      	ldr	r3, [pc, #252]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e06f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e067      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f023 0203 	bic.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4934      	ldr	r1, [pc, #208]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc8:	f7fe ff14 	bl	8002df4 <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd0:	f7fe ff10 	bl	8002df4 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e04f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 020c 	and.w	r2, r3, #12
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d1eb      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b25      	ldr	r3, [pc, #148]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d20c      	bcs.n	8004020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e032      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4916      	ldr	r1, [pc, #88]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	490e      	ldr	r1, [pc, #56]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405e:	f000 f821 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 8004062:	4602      	mov	r2, r0
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	490a      	ldr	r1, [pc, #40]	; (8004098 <HAL_RCC_ClockConfig+0x1c0>)
 8004070:	5ccb      	ldrb	r3, [r1, r3]
 8004072:	fa22 f303 	lsr.w	r3, r2, r3
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1c8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fe74 	bl	8002d6c <HAL_InitTick>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40023c00 	.word	0x40023c00
 8004094:	40023800 	.word	0x40023800
 8004098:	08005af8 	.word	0x08005af8
 800409c:	20000028 	.word	0x20000028
 80040a0:	2000002c 	.word	0x2000002c

080040a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a8:	b090      	sub	sp, #64	; 0x40
 80040aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
 80040b0:	2300      	movs	r3, #0
 80040b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b4:	2300      	movs	r3, #0
 80040b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040bc:	4b59      	ldr	r3, [pc, #356]	; (8004224 <HAL_RCC_GetSysClockFreq+0x180>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d00d      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x40>
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	f200 80a1 	bhi.w	8004210 <HAL_RCC_GetSysClockFreq+0x16c>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0x34>
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d003      	beq.n	80040de <HAL_RCC_GetSysClockFreq+0x3a>
 80040d6:	e09b      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d8:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_GetSysClockFreq+0x184>)
 80040da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040dc:	e09b      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040de:	4b53      	ldr	r3, [pc, #332]	; (800422c <HAL_RCC_GetSysClockFreq+0x188>)
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040e2:	e098      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e4:	4b4f      	ldr	r3, [pc, #316]	; (8004224 <HAL_RCC_GetSysClockFreq+0x180>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ee:	4b4d      	ldr	r3, [pc, #308]	; (8004224 <HAL_RCC_GetSysClockFreq+0x180>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d028      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fa:	4b4a      	ldr	r3, [pc, #296]	; (8004224 <HAL_RCC_GetSysClockFreq+0x180>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	099b      	lsrs	r3, r3, #6
 8004100:	2200      	movs	r2, #0
 8004102:	623b      	str	r3, [r7, #32]
 8004104:	627a      	str	r2, [r7, #36]	; 0x24
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800410c:	2100      	movs	r1, #0
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_RCC_GetSysClockFreq+0x188>)
 8004110:	fb03 f201 	mul.w	r2, r3, r1
 8004114:	2300      	movs	r3, #0
 8004116:	fb00 f303 	mul.w	r3, r0, r3
 800411a:	4413      	add	r3, r2
 800411c:	4a43      	ldr	r2, [pc, #268]	; (800422c <HAL_RCC_GetSysClockFreq+0x188>)
 800411e:	fba0 1202 	umull	r1, r2, r0, r2
 8004122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004124:	460a      	mov	r2, r1
 8004126:	62ba      	str	r2, [r7, #40]	; 0x28
 8004128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800412a:	4413      	add	r3, r2
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	2200      	movs	r2, #0
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	61fa      	str	r2, [r7, #28]
 8004136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800413a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800413e:	f7fc fd19 	bl	8000b74 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4613      	mov	r3, r2
 8004148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800414a:	e053      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800414c:	4b35      	ldr	r3, [pc, #212]	; (8004224 <HAL_RCC_GetSysClockFreq+0x180>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	099b      	lsrs	r3, r3, #6
 8004152:	2200      	movs	r2, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	617a      	str	r2, [r7, #20]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800415e:	f04f 0b00 	mov.w	fp, #0
 8004162:	4652      	mov	r2, sl
 8004164:	465b      	mov	r3, fp
 8004166:	f04f 0000 	mov.w	r0, #0
 800416a:	f04f 0100 	mov.w	r1, #0
 800416e:	0159      	lsls	r1, r3, #5
 8004170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004174:	0150      	lsls	r0, r2, #5
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	ebb2 080a 	subs.w	r8, r2, sl
 800417e:	eb63 090b 	sbc.w	r9, r3, fp
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800418e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004192:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004196:	ebb2 0408 	subs.w	r4, r2, r8
 800419a:	eb63 0509 	sbc.w	r5, r3, r9
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	00eb      	lsls	r3, r5, #3
 80041a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ac:	00e2      	lsls	r2, r4, #3
 80041ae:	4614      	mov	r4, r2
 80041b0:	461d      	mov	r5, r3
 80041b2:	eb14 030a 	adds.w	r3, r4, sl
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	eb45 030b 	adc.w	r3, r5, fp
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ca:	4629      	mov	r1, r5
 80041cc:	028b      	lsls	r3, r1, #10
 80041ce:	4621      	mov	r1, r4
 80041d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041d4:	4621      	mov	r1, r4
 80041d6:	028a      	lsls	r2, r1, #10
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	2200      	movs	r2, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	60fa      	str	r2, [r7, #12]
 80041e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e8:	f7fc fcc4 	bl	8000b74 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4613      	mov	r3, r2
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_GetSysClockFreq+0x180>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800420e:	e002      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetSysClockFreq+0x184>)
 8004212:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004218:	4618      	mov	r0, r3
 800421a:	3740      	adds	r7, #64	; 0x40
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	00f42400 	.word	0x00f42400
 800422c:	017d7840 	.word	0x017d7840

08004230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07b      	b.n	800433a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004252:	d009      	beq.n	8004268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
 800425a:	e005      	b.n	8004268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fe f8d6 	bl	8002434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	ea42 0103 	orr.w	r1, r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	f003 0104 	and.w	r1, r3, #4
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f003 0210 	and.w	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004328:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b088      	sub	sp, #32
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_SPI_Transmit+0x22>
 8004360:	2302      	movs	r3, #2
 8004362:	e126      	b.n	80045b2 <HAL_SPI_Transmit+0x270>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800436c:	f7fe fd42 	bl	8002df4 <HAL_GetTick>
 8004370:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d002      	beq.n	8004388 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004382:	2302      	movs	r3, #2
 8004384:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004386:	e10b      	b.n	80045a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_SPI_Transmit+0x52>
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d102      	bne.n	800439a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004398:	e102      	b.n	80045a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2203      	movs	r2, #3
 800439e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	88fa      	ldrh	r2, [r7, #6]
 80043b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e0:	d10f      	bne.n	8004402 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004400:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d007      	beq.n	8004420 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800441e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004428:	d14b      	bne.n	80044c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_SPI_Transmit+0xf6>
 8004432:	8afb      	ldrh	r3, [r7, #22]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d13e      	bne.n	80044b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	881a      	ldrh	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	1c9a      	adds	r2, r3, #2
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800445c:	e02b      	b.n	80044b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b02      	cmp	r3, #2
 800446a:	d112      	bne.n	8004492 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	881a      	ldrh	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	1c9a      	adds	r2, r3, #2
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004490:	e011      	b.n	80044b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004492:	f7fe fcaf 	bl	8002df4 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d803      	bhi.n	80044aa <HAL_SPI_Transmit+0x168>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d102      	bne.n	80044b0 <HAL_SPI_Transmit+0x16e>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044b4:	e074      	b.n	80045a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ce      	bne.n	800445e <HAL_SPI_Transmit+0x11c>
 80044c0:	e04c      	b.n	800455c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_SPI_Transmit+0x18e>
 80044ca:	8afb      	ldrh	r3, [r7, #22]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d140      	bne.n	8004552 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	7812      	ldrb	r2, [r2, #0]
 80044dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044f6:	e02c      	b.n	8004552 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d113      	bne.n	800452e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	330c      	adds	r3, #12
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	86da      	strh	r2, [r3, #54]	; 0x36
 800452c:	e011      	b.n	8004552 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800452e:	f7fe fc61 	bl	8002df4 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d803      	bhi.n	8004546 <HAL_SPI_Transmit+0x204>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d102      	bne.n	800454c <HAL_SPI_Transmit+0x20a>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004550:	e026      	b.n	80045a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1cd      	bne.n	80044f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	6839      	ldr	r1, [r7, #0]
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fbcb 	bl	8004cfc <SPI_EndRxTxTransaction>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10a      	bne.n	8004590 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e000      	b.n	80045a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800459e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b088      	sub	sp, #32
 80045be:	af02      	add	r7, sp, #8
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d6:	d112      	bne.n	80045fe <HAL_SPI_Receive+0x44>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10e      	bne.n	80045fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2204      	movs	r2, #4
 80045e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045e8:	88fa      	ldrh	r2, [r7, #6]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	4613      	mov	r3, r2
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f8f1 	bl	80047dc <HAL_SPI_TransmitReceive>
 80045fa:	4603      	mov	r3, r0
 80045fc:	e0ea      	b.n	80047d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_SPI_Receive+0x52>
 8004608:	2302      	movs	r3, #2
 800460a:	e0e3      	b.n	80047d4 <HAL_SPI_Receive+0x21a>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004614:	f7fe fbee 	bl	8002df4 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d002      	beq.n	800462c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004626:	2302      	movs	r3, #2
 8004628:	75fb      	strb	r3, [r7, #23]
    goto error;
 800462a:	e0ca      	b.n	80047c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_SPI_Receive+0x7e>
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800463c:	e0c1      	b.n	80047c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2204      	movs	r2, #4
 8004642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	88fa      	ldrh	r2, [r7, #6]
 8004656:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004684:	d10f      	bne.n	80046a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004694:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d007      	beq.n	80046c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d162      	bne.n	8004792 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046cc:	e02e      	b.n	800472c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d115      	bne.n	8004708 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f103 020c 	add.w	r2, r3, #12
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004706:	e011      	b.n	800472c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004708:	f7fe fb74 	bl	8002df4 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d803      	bhi.n	8004720 <HAL_SPI_Receive+0x166>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d102      	bne.n	8004726 <HAL_SPI_Receive+0x16c>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	75fb      	strb	r3, [r7, #23]
          goto error;
 800472a:	e04a      	b.n	80047c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1cb      	bne.n	80046ce <HAL_SPI_Receive+0x114>
 8004736:	e031      	b.n	800479c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b01      	cmp	r3, #1
 8004744:	d113      	bne.n	800476e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	b292      	uxth	r2, r2
 8004752:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	1c9a      	adds	r2, r3, #2
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800476c:	e011      	b.n	8004792 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800476e:	f7fe fb41 	bl	8002df4 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d803      	bhi.n	8004786 <HAL_SPI_Receive+0x1cc>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d102      	bne.n	800478c <HAL_SPI_Receive+0x1d2>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004790:	e017      	b.n	80047c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1cd      	bne.n	8004738 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	6839      	ldr	r1, [r7, #0]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fa45 	bl	8004c30 <SPI_EndRxTransaction>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
 80047be:	e000      	b.n	80047c2 <HAL_SPI_Receive+0x208>
  }

error :
 80047c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047ea:	2301      	movs	r3, #1
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_SPI_TransmitReceive+0x26>
 80047fe:	2302      	movs	r3, #2
 8004800:	e18a      	b.n	8004b18 <HAL_SPI_TransmitReceive+0x33c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800480a:	f7fe faf3 	bl	8002df4 <HAL_GetTick>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004820:	887b      	ldrh	r3, [r7, #2]
 8004822:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004824:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004828:	2b01      	cmp	r3, #1
 800482a:	d00f      	beq.n	800484c <HAL_SPI_TransmitReceive+0x70>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004832:	d107      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x68>
 800483c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004840:	2b04      	cmp	r3, #4
 8004842:	d003      	beq.n	800484c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004844:	2302      	movs	r3, #2
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800484a:	e15b      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_SPI_TransmitReceive+0x82>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_SPI_TransmitReceive+0x82>
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004864:	e14e      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b04      	cmp	r3, #4
 8004870:	d003      	beq.n	800487a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2205      	movs	r2, #5
 8004876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	887a      	ldrh	r2, [r7, #2]
 800488a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	887a      	ldrh	r2, [r7, #2]
 800489c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	887a      	ldrh	r2, [r7, #2]
 80048a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d007      	beq.n	80048ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d6:	d178      	bne.n	80049ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x10a>
 80048e0:	8b7b      	ldrh	r3, [r7, #26]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d166      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	881a      	ldrh	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	1c9a      	adds	r2, r3, #2
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800490a:	e053      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	d11b      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x176>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d016      	beq.n	8004952 <HAL_SPI_TransmitReceive+0x176>
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d113      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	881a      	ldrh	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	1c9a      	adds	r2, r3, #2
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d119      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x1b8>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d014      	beq.n	8004994 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	b292      	uxth	r2, r2
 8004976:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	1c9a      	adds	r2, r3, #2
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004990:	2301      	movs	r3, #1
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004994:	f7fe fa2e 	bl	8002df4 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d807      	bhi.n	80049b4 <HAL_SPI_TransmitReceive+0x1d8>
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049aa:	d003      	beq.n	80049b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049b2:	e0a7      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1a6      	bne.n	800490c <HAL_SPI_TransmitReceive+0x130>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1a1      	bne.n	800490c <HAL_SPI_TransmitReceive+0x130>
 80049c8:	e07c      	b.n	8004ac4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x1fc>
 80049d2:	8b7b      	ldrh	r3, [r7, #26]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d16b      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049fe:	e057      	b.n	8004ab0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d11c      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x26c>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d017      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x26c>
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d114      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d119      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x2ae>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d014      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a86:	2301      	movs	r3, #1
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a8a:	f7fe f9b3 	bl	8002df4 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d803      	bhi.n	8004aa2 <HAL_SPI_TransmitReceive+0x2c6>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d102      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x2cc>
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d103      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004aae:	e029      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1a2      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x224>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d19d      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f917 	bl	8004cfc <SPI_EndRxTxTransaction>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d006      	beq.n	8004ae2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ae0:	e010      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	e000      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004b02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3730      	adds	r7, #48	; 0x30
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b30:	f7fe f960 	bl	8002df4 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b40:	f7fe f958 	bl	8002df4 <HAL_GetTick>
 8004b44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b46:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	015b      	lsls	r3, r3, #5
 8004b4c:	0d1b      	lsrs	r3, r3, #20
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	fb02 f303 	mul.w	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b56:	e054      	b.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d050      	beq.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b60:	f7fe f948 	bl	8002df4 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d902      	bls.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d13d      	bne.n	8004bf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b8e:	d111      	bne.n	8004bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b98:	d004      	beq.n	8004ba4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba2:	d107      	bne.n	8004bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d10f      	bne.n	8004bde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e017      	b.n	8004c22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d19b      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000028 	.word	0x20000028

08004c30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c44:	d111      	bne.n	8004c6a <SPI_EndRxTransaction+0x3a>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4e:	d004      	beq.n	8004c5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c58:	d107      	bne.n	8004c6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c72:	d12a      	bne.n	8004cca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7c:	d012      	beq.n	8004ca4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2200      	movs	r2, #0
 8004c86:	2180      	movs	r1, #128	; 0x80
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff ff49 	bl	8004b20 <SPI_WaitFlagStateUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d02d      	beq.n	8004cf0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e026      	b.n	8004cf2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2101      	movs	r1, #1
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff ff36 	bl	8004b20 <SPI_WaitFlagStateUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01a      	beq.n	8004cf0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e013      	b.n	8004cf2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7ff ff23 	bl	8004b20 <SPI_WaitFlagStateUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	f043 0220 	orr.w	r2, r3, #32
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e000      	b.n	8004cf2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d08:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <SPI_EndRxTxTransaction+0x7c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <SPI_EndRxTxTransaction+0x80>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	0d5b      	lsrs	r3, r3, #21
 8004d14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d26:	d112      	bne.n	8004d4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2180      	movs	r1, #128	; 0x80
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff fef4 	bl	8004b20 <SPI_WaitFlagStateUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d016      	beq.n	8004d6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d42:	f043 0220 	orr.w	r2, r3, #32
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e00f      	b.n	8004d6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d64:	2b80      	cmp	r3, #128	; 0x80
 8004d66:	d0f2      	beq.n	8004d4e <SPI_EndRxTxTransaction+0x52>
 8004d68:	e000      	b.n	8004d6c <SPI_EndRxTxTransaction+0x70>
        break;
 8004d6a:	bf00      	nop
  }

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000028 	.word	0x20000028
 8004d7c:	165e9f81 	.word	0x165e9f81

08004d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e041      	b.n	8004e16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fd fe26 	bl	80029f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f000 fb1c 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d001      	beq.n	8004e38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e03c      	b.n	8004eb2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <HAL_TIM_Base_Start+0xa0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <HAL_TIM_Base_Start+0x5c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d013      	beq.n	8004e7c <HAL_TIM_Base_Start+0x5c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <HAL_TIM_Base_Start+0xa4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIM_Base_Start+0x5c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <HAL_TIM_Base_Start+0xa8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_Base_Start+0x5c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <HAL_TIM_Base_Start+0xac>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_Base_Start+0x5c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <HAL_TIM_Base_Start+0xb0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d111      	bne.n	8004ea0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d010      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	e007      	b.n	8004eb0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40014000 	.word	0x40014000

08004ed4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e041      	b.n	8004f6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f839 	bl	8004f72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 fa72 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d109      	bne.n	8004fac <HAL_TIM_PWM_Start+0x24>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	e022      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x6a>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d109      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x3e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	bf14      	ite	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	e015      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x6a>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d109      	bne.n	8004fe0 <HAL_TIM_PWM_Start+0x58>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	e008      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x6a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e068      	b.n	80050cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0x82>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	e013      	b.n	8005032 <HAL_TIM_PWM_Start+0xaa>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b04      	cmp	r3, #4
 800500e:	d104      	bne.n	800501a <HAL_TIM_PWM_Start+0x92>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005018:	e00b      	b.n	8005032 <HAL_TIM_PWM_Start+0xaa>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d104      	bne.n	800502a <HAL_TIM_PWM_Start+0xa2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005028:	e003      	b.n	8005032 <HAL_TIM_PWM_Start+0xaa>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2201      	movs	r2, #1
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fc84 	bl	8005948 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a23      	ldr	r2, [pc, #140]	; (80050d4 <HAL_TIM_PWM_Start+0x14c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d107      	bne.n	800505a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <HAL_TIM_PWM_Start+0x14c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <HAL_TIM_PWM_Start+0x10e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506c:	d013      	beq.n	8005096 <HAL_TIM_PWM_Start+0x10e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a19      	ldr	r2, [pc, #100]	; (80050d8 <HAL_TIM_PWM_Start+0x150>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <HAL_TIM_PWM_Start+0x10e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a17      	ldr	r2, [pc, #92]	; (80050dc <HAL_TIM_PWM_Start+0x154>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_TIM_PWM_Start+0x10e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <HAL_TIM_PWM_Start+0x158>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_TIM_PWM_Start+0x10e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <HAL_TIM_PWM_Start+0x15c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d111      	bne.n	80050ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b06      	cmp	r3, #6
 80050a6:	d010      	beq.n	80050ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b8:	e007      	b.n	80050ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40014000 	.word	0x40014000

080050e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005102:	2302      	movs	r3, #2
 8005104:	e0ae      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b0c      	cmp	r3, #12
 8005112:	f200 809f 	bhi.w	8005254 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005151 	.word	0x08005151
 8005120:	08005255 	.word	0x08005255
 8005124:	08005255 	.word	0x08005255
 8005128:	08005255 	.word	0x08005255
 800512c:	08005191 	.word	0x08005191
 8005130:	08005255 	.word	0x08005255
 8005134:	08005255 	.word	0x08005255
 8005138:	08005255 	.word	0x08005255
 800513c:	080051d3 	.word	0x080051d3
 8005140:	08005255 	.word	0x08005255
 8005144:	08005255 	.word	0x08005255
 8005148:	08005255 	.word	0x08005255
 800514c:	08005213 	.word	0x08005213
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f9d0 	bl	80054fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0208 	orr.w	r2, r2, #8
 800516a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0204 	bic.w	r2, r2, #4
 800517a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6999      	ldr	r1, [r3, #24]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	619a      	str	r2, [r3, #24]
      break;
 800518e:	e064      	b.n	800525a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fa16 	bl	80055c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6999      	ldr	r1, [r3, #24]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	021a      	lsls	r2, r3, #8
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	619a      	str	r2, [r3, #24]
      break;
 80051d0:	e043      	b.n	800525a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fa61 	bl	80056a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0208 	orr.w	r2, r2, #8
 80051ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0204 	bic.w	r2, r2, #4
 80051fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69d9      	ldr	r1, [r3, #28]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	61da      	str	r2, [r3, #28]
      break;
 8005210:	e023      	b.n	800525a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	4618      	mov	r0, r3
 800521a:	f000 faab 	bl	8005774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800522c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69d9      	ldr	r1, [r3, #28]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	021a      	lsls	r2, r3, #8
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	61da      	str	r2, [r3, #28]
      break;
 8005252:	e002      	b.n	800525a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	75fb      	strb	r3, [r7, #23]
      break;
 8005258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_TIM_ConfigClockSource+0x1c>
 8005284:	2302      	movs	r3, #2
 8005286:	e0b4      	b.n	80053f2 <HAL_TIM_ConfigClockSource+0x186>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c0:	d03e      	beq.n	8005340 <HAL_TIM_ConfigClockSource+0xd4>
 80052c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c6:	f200 8087 	bhi.w	80053d8 <HAL_TIM_ConfigClockSource+0x16c>
 80052ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ce:	f000 8086 	beq.w	80053de <HAL_TIM_ConfigClockSource+0x172>
 80052d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d6:	d87f      	bhi.n	80053d8 <HAL_TIM_ConfigClockSource+0x16c>
 80052d8:	2b70      	cmp	r3, #112	; 0x70
 80052da:	d01a      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0xa6>
 80052dc:	2b70      	cmp	r3, #112	; 0x70
 80052de:	d87b      	bhi.n	80053d8 <HAL_TIM_ConfigClockSource+0x16c>
 80052e0:	2b60      	cmp	r3, #96	; 0x60
 80052e2:	d050      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x11a>
 80052e4:	2b60      	cmp	r3, #96	; 0x60
 80052e6:	d877      	bhi.n	80053d8 <HAL_TIM_ConfigClockSource+0x16c>
 80052e8:	2b50      	cmp	r3, #80	; 0x50
 80052ea:	d03c      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0xfa>
 80052ec:	2b50      	cmp	r3, #80	; 0x50
 80052ee:	d873      	bhi.n	80053d8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d058      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0x13a>
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d86f      	bhi.n	80053d8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b30      	cmp	r3, #48	; 0x30
 80052fa:	d064      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x15a>
 80052fc:	2b30      	cmp	r3, #48	; 0x30
 80052fe:	d86b      	bhi.n	80053d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005300:	2b20      	cmp	r3, #32
 8005302:	d060      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005304:	2b20      	cmp	r3, #32
 8005306:	d867      	bhi.n	80053d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005308:	2b00      	cmp	r3, #0
 800530a:	d05c      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x15a>
 800530c:	2b10      	cmp	r3, #16
 800530e:	d05a      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005310:	e062      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6899      	ldr	r1, [r3, #8]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f000 faf1 	bl	8005908 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	609a      	str	r2, [r3, #8]
      break;
 800533e:	e04f      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	6899      	ldr	r1, [r3, #8]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f000 fada 	bl	8005908 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005362:	609a      	str	r2, [r3, #8]
      break;
 8005364:	e03c      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	461a      	mov	r2, r3
 8005374:	f000 fa4e 	bl	8005814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2150      	movs	r1, #80	; 0x50
 800537e:	4618      	mov	r0, r3
 8005380:	f000 faa7 	bl	80058d2 <TIM_ITRx_SetConfig>
      break;
 8005384:	e02c      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6859      	ldr	r1, [r3, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	461a      	mov	r2, r3
 8005394:	f000 fa6d 	bl	8005872 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2160      	movs	r1, #96	; 0x60
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fa97 	bl	80058d2 <TIM_ITRx_SetConfig>
      break;
 80053a4:	e01c      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6859      	ldr	r1, [r3, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f000 fa2e 	bl	8005814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2140      	movs	r1, #64	; 0x40
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fa87 	bl	80058d2 <TIM_ITRx_SetConfig>
      break;
 80053c4:	e00c      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4619      	mov	r1, r3
 80053d0:	4610      	mov	r0, r2
 80053d2:	f000 fa7e 	bl	80058d2 <TIM_ITRx_SetConfig>
      break;
 80053d6:	e003      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      break;
 80053dc:	e000      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a34      	ldr	r2, [pc, #208]	; (80054e0 <TIM_Base_SetConfig+0xe4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00f      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d00b      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a31      	ldr	r2, [pc, #196]	; (80054e4 <TIM_Base_SetConfig+0xe8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a30      	ldr	r2, [pc, #192]	; (80054e8 <TIM_Base_SetConfig+0xec>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a2f      	ldr	r2, [pc, #188]	; (80054ec <TIM_Base_SetConfig+0xf0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d108      	bne.n	8005446 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a25      	ldr	r2, [pc, #148]	; (80054e0 <TIM_Base_SetConfig+0xe4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01b      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d017      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <TIM_Base_SetConfig+0xe8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <TIM_Base_SetConfig+0xec>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00f      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a20      	ldr	r2, [pc, #128]	; (80054ec <TIM_Base_SetConfig+0xf0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00b      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <TIM_Base_SetConfig+0xf4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <TIM_Base_SetConfig+0xf8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <TIM_Base_SetConfig+0xfc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d108      	bne.n	8005498 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <TIM_Base_SetConfig+0xe4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d103      	bne.n	80054cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	615a      	str	r2, [r3, #20]
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800

080054fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0201 	bic.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 0302 	bic.w	r3, r3, #2
 8005544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a1c      	ldr	r2, [pc, #112]	; (80055c4 <TIM_OC1_SetConfig+0xc8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d10c      	bne.n	8005572 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0308 	bic.w	r3, r3, #8
 800555e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f023 0304 	bic.w	r3, r3, #4
 8005570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <TIM_OC1_SetConfig+0xc8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d111      	bne.n	800559e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	621a      	str	r2, [r3, #32]
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40010000 	.word	0x40010000

080055c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0210 	bic.w	r2, r3, #16
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 0320 	bic.w	r3, r3, #32
 8005612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a1e      	ldr	r2, [pc, #120]	; (800569c <TIM_OC2_SetConfig+0xd4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d10d      	bne.n	8005644 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a15      	ldr	r2, [pc, #84]	; (800569c <TIM_OC2_SetConfig+0xd4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d113      	bne.n	8005674 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800565a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000

080056a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <TIM_OC3_SetConfig+0xd0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d10d      	bne.n	800571a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a14      	ldr	r2, [pc, #80]	; (8005770 <TIM_OC3_SetConfig+0xd0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d113      	bne.n	800574a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	621a      	str	r2, [r3, #32]
}
 8005764:	bf00      	nop
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	40010000 	.word	0x40010000

08005774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a10      	ldr	r2, [pc, #64]	; (8005810 <TIM_OC4_SetConfig+0x9c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d109      	bne.n	80057e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	019b      	lsls	r3, r3, #6
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	621a      	str	r2, [r3, #32]
}
 8005802:	bf00      	nop
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40010000 	.word	0x40010000

08005814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f023 0201 	bic.w	r2, r3, #1
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800583e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f023 030a 	bic.w	r3, r3, #10
 8005850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005872:	b480      	push	{r7}
 8005874:	b087      	sub	sp, #28
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0210 	bic.w	r2, r3, #16
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800589c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	031b      	lsls	r3, r3, #12
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f043 0307 	orr.w	r3, r3, #7
 80058f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	021a      	lsls	r2, r3, #8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	431a      	orrs	r2, r3
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4313      	orrs	r3, r2
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	609a      	str	r2, [r3, #8]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	2201      	movs	r2, #1
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	43db      	mvns	r3, r3
 800596a:	401a      	ands	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	fa01 f303 	lsl.w	r3, r1, r3
 8005980:	431a      	orrs	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
	...

08005994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e050      	b.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f8:	d013      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10c      	bne.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00
 8005a6c:	40014000 	.word	0x40014000

08005a70 <__libc_init_array>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	4d0d      	ldr	r5, [pc, #52]	; (8005aa8 <__libc_init_array+0x38>)
 8005a74:	4c0d      	ldr	r4, [pc, #52]	; (8005aac <__libc_init_array+0x3c>)
 8005a76:	1b64      	subs	r4, r4, r5
 8005a78:	10a4      	asrs	r4, r4, #2
 8005a7a:	2600      	movs	r6, #0
 8005a7c:	42a6      	cmp	r6, r4
 8005a7e:	d109      	bne.n	8005a94 <__libc_init_array+0x24>
 8005a80:	4d0b      	ldr	r5, [pc, #44]	; (8005ab0 <__libc_init_array+0x40>)
 8005a82:	4c0c      	ldr	r4, [pc, #48]	; (8005ab4 <__libc_init_array+0x44>)
 8005a84:	f000 f820 	bl	8005ac8 <_init>
 8005a88:	1b64      	subs	r4, r4, r5
 8005a8a:	10a4      	asrs	r4, r4, #2
 8005a8c:	2600      	movs	r6, #0
 8005a8e:	42a6      	cmp	r6, r4
 8005a90:	d105      	bne.n	8005a9e <__libc_init_array+0x2e>
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a98:	4798      	blx	r3
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7ee      	b.n	8005a7c <__libc_init_array+0xc>
 8005a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa2:	4798      	blx	r3
 8005aa4:	3601      	adds	r6, #1
 8005aa6:	e7f2      	b.n	8005a8e <__libc_init_array+0x1e>
 8005aa8:	08005b18 	.word	0x08005b18
 8005aac:	08005b18 	.word	0x08005b18
 8005ab0:	08005b18 	.word	0x08005b18
 8005ab4:	08005b1c 	.word	0x08005b1c

08005ab8 <memset>:
 8005ab8:	4402      	add	r2, r0
 8005aba:	4603      	mov	r3, r0
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d100      	bne.n	8005ac2 <memset+0xa>
 8005ac0:	4770      	bx	lr
 8005ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac6:	e7f9      	b.n	8005abc <memset+0x4>

08005ac8 <_init>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	bf00      	nop
 8005acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ace:	bc08      	pop	{r3}
 8005ad0:	469e      	mov	lr, r3
 8005ad2:	4770      	bx	lr

08005ad4 <_fini>:
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	bf00      	nop
 8005ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ada:	bc08      	pop	{r3}
 8005adc:	469e      	mov	lr, r3
 8005ade:	4770      	bx	lr
